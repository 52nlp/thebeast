
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 22 20:18:01 GMT 2007
//----------------------------------------------------

package thebeast.pml.parser;

import java.util.LinkedList;
import java_cup.runtime.*;
import thebeast.pml.*;
import thebeast.pml.formula.*;
import thebeast.pml.term.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 22 20:18:01 GMT 2007
  */
public class PMLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PMLParser() {super();}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\024\005\000\002\024\005\000\002" +
    "\024\004\000\002\024\004\000\002\024\005\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\012\000\002\024\006\000\002" +
    "\024\013\000\002\024\006\000\002\024\005\000\002\024" +
    "\006\000\002\024\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\006\000" +
    "\002\024\007\000\002\024\004\000\002\024\004\000\002" +
    "\024\006\000\002\024\006\000\002\024\006\000\002\024" +
    "\004\000\002\024\004\000\002\025\006\000\002\025\007" +
    "\000\002\026\006\000\002\026\013\000\002\027\010\000" +
    "\002\027\011\000\002\027\011\000\002\005\005\000\002" +
    "\005\003\000\002\012\005\000\002\012\003\000\002\011" +
    "\003\000\002\011\005\000\002\013\005\000\002\013\003" +
    "\000\002\010\004\000\002\007\005\000\002\007\003\000" +
    "\002\022\016\000\002\022\012\000\002\022\010\000\002" +
    "\022\005\000\002\020\006\000\002\020\005\000\002\020" +
    "\005\000\002\020\011\000\002\020\011\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\021\005\000" +
    "\002\021\003\000\002\006\005\000\002\006\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\015\006\000\002\015\010\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\003\000\002\014\004\000\002\014\003\000\002" +
    "\014\004\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\056\002\uffff\004\021\005\031\006\037\014" +
    "\004\015\032\017\036\021\030\022\034\023\015\024\006" +
    "\027\023\030\026\032\012\033\014\034\020\035\010\041" +
    "\025\042\011\047\005\052\033\053\027\001\002\000\006" +
    "\044\303\045\302\001\002\000\004\153\301\001\002\000" +
    "\006\020\275\025\274\001\002\000\004\055\ufffd\001\002" +
    "\000\004\055\uffe1\001\002\000\006\015\272\032\273\001" +
    "\002\000\004\020\270\001\002\000\004\055\ufffb\001\002" +
    "\000\004\055\uffe2\001\002\000\010\011\261\055\uffe0\150" +
    "\262\001\002\000\004\055\257\001\002\000\004\055\ufffa" +
    "\001\002\000\004\020\255\001\002\000\004\045\245\001" +
    "\002\000\004\055\ufffc\001\002\000\004\150\244\001\002" +
    "\000\004\055\ufff9\001\002\000\004\044\235\001\002\000" +
    "\004\063\123\001\002\000\004\063\121\001\002\000\010" +
    "\015\115\032\116\034\114\001\002\000\004\044\104\001" +
    "\002\000\006\020\077\044\100\001\002\000\004\063\072" +
    "\001\002\000\006\055\uffe3\150\071\001\002\000\004\002" +
    "\070\001\002\000\004\020\052\001\002\000\004\044\040" +
    "\001\002\000\004\063\041\001\002\000\004\045\042\001" +
    "\002\000\012\007\uffcc\055\uffcc\107\uffcc\124\uffcc\001\002" +
    "\000\006\007\045\124\044\001\002\000\004\045\047\001" +
    "\002\000\004\045\046\001\002\000\012\007\uffcd\055\uffcd" +
    "\107\uffcd\124\uffcd\001\002\000\010\055\uffd2\065\050\066" +
    "\051\001\002\000\004\055\uffd1\001\002\000\004\055\uffd0" +
    "\001\002\000\006\044\054\153\053\001\002\000\006\055" +
    "\uffeb\107\063\001\002\000\004\153\055\001\002\000\006" +
    "\055\uffe9\107\056\001\002\000\004\150\057\001\002\000" +
    "\004\066\060\001\002\000\004\150\061\001\002\000\004" +
    "\110\062\001\002\000\004\055\uffe8\001\002\000\004\150" +
    "\064\001\002\000\004\066\065\001\002\000\004\150\066" +
    "\001\002\000\004\110\067\001\002\000\004\055\uffea\001" +
    "\002\000\004\002\001\001\002\000\004\055\uffe4\001\002" +
    "\000\004\044\074\001\002\000\006\055\ufff7\060\075\001" +
    "\002\000\006\055\uffc8\060\uffc8\001\002\000\004\044\076" +
    "\001\002\000\006\055\uffc9\060\uffc9\001\002\000\004\153" +
    "\103\001\002\000\004\020\101\001\002\000\004\153\102" +
    "\001\002\000\004\055\uffe5\001\002\000\004\055\uffee\001" +
    "\002\000\004\063\105\001\002\000\004\045\042\001\002" +
    "\000\010\007\045\055\uffd4\107\107\001\002\000\004\037" +
    "\110\001\002\000\004\063\111\001\002\000\004\150\112" +
    "\001\002\000\004\110\113\001\002\000\004\055\uffd3\001" +
    "\002\000\006\044\120\055\ufff0\001\002\000\006\044\117" +
    "\055\ufff1\001\002\000\004\055\ufff2\001\002\000\004\055" +
    "\ufff3\001\002\000\004\055\uffef\001\002\000\004\044\074" +
    "\001\002\000\006\055\ufff6\060\075\001\002\000\030\011" +
    "\127\013\142\043\141\044\125\045\132\046\140\066\124" +
    "\123\126\150\130\151\135\153\134\001\002\000\010\046" +
    "\232\150\233\151\231\001\002\000\016\031\225\065\uffad" +
    "\066\uffad\072\uffad\073\uffad\107\226\001\002\000\004\045" +
    "\173\001\002\000\004\045\173\001\002\000\034\012\uffac" +
    "\055\uffac\060\uffac\063\uffac\065\uffac\066\uffac\072\uffac\073" +
    "\uffac\103\uffac\104\uffac\110\uffac\112\uffac\123\uffac\001\002" +
    "\000\012\065\147\066\150\072\170\073\167\001\002\000" +
    "\034\012\uffa5\055\uffa5\060\uffa5\063\uffa5\065\uffa5\066\uffa5" +
    "\072\uffa5\073\uffa5\103\uffa5\104\uffa5\110\uffa5\112\uffa5\123" +
    "\uffa5\001\002\000\034\012\uffae\055\uffae\060\uffae\063\uffae" +
    "\065\uffae\066\uffae\072\uffae\073\uffae\103\uffae\104\uffae\110" +
    "\uffae\112\uffae\123\uffae\001\002\000\034\012\uffa6\055\uffa6" +
    "\060\uffa6\063\uffa6\065\uffa6\066\uffa6\072\uffa6\073\uffa6\103" +
    "\uffa6\104\uffa6\110\uffa6\112\uffa6\123\uffa6\001\002\000\034" +
    "\012\uffaa\055\uffaa\060\uffaa\063\uffaa\065\uffaa\066\uffaa\072" +
    "\uffaa\073\uffaa\103\uffaa\104\uffaa\110\uffaa\112\uffaa\123\uffaa" +
    "\001\002\000\010\055\uffc1\103\164\104\163\001\002\000" +
    "\034\012\uffb4\055\uffb4\060\uffb4\063\uffb4\065\uffb4\066\uffb4" +
    "\072\uffb4\073\uffb4\103\uffb4\104\uffb4\110\uffb4\112\uffb4\123" +
    "\uffb4\001\002\000\034\012\uffa8\055\uffa8\060\uffa8\063\uffa8" +
    "\065\uffa8\066\uffa8\072\uffa8\073\uffa8\103\uffa8\104\uffa8\110" +
    "\uffa8\112\uffa8\123\uffa8\001\002\000\004\107\143\001\002" +
    "\000\034\012\uffb1\055\uffb1\060\uffb1\063\uffb1\065\uffb1\066" +
    "\uffb1\072\uffb1\073\uffb1\103\uffb1\104\uffb1\110\uffb1\112\uffb1" +
    "\123\uffb1\001\002\000\024\013\142\043\141\044\144\045" +
    "\132\046\140\066\124\150\130\151\135\153\134\001\002" +
    "\000\036\012\uffad\055\uffad\060\uffad\063\uffad\065\uffad\066" +
    "\uffad\072\uffad\073\uffad\103\uffad\104\uffad\107\156\110\uffad" +
    "\112\uffad\123\uffad\001\002\000\004\060\153\001\002\000" +
    "\012\060\uffb5\065\147\066\150\110\uffb5\001\002\000\024" +
    "\013\142\043\141\044\144\045\132\046\140\066\124\150" +
    "\130\151\135\153\134\001\002\000\024\013\142\043\141" +
    "\044\144\045\132\046\140\066\124\150\130\151\135\153" +
    "\134\001\002\000\034\012\uffb2\055\uffb2\060\uffb2\063\uffb2" +
    "\065\uffb2\066\uffb2\072\uffb2\073\uffb2\103\uffb2\104\uffb2\110" +
    "\uffb2\112\uffb2\123\uffb2\001\002\000\034\012\uffb3\055\uffb3" +
    "\060\uffb3\063\uffb3\065\uffb3\066\uffb3\072\uffb3\073\uffb3\103" +
    "\uffb3\104\uffb3\110\uffb3\112\uffb3\123\uffb3\001\002\000\024" +
    "\013\142\043\141\044\144\045\132\046\140\066\124\150" +
    "\130\151\135\153\134\001\002\000\012\060\uffb6\065\147" +
    "\066\150\110\155\001\002\000\034\012\uffaf\055\uffaf\060" +
    "\uffaf\063\uffaf\065\uffaf\066\uffaf\072\uffaf\073\uffaf\103\uffaf" +
    "\104\uffaf\110\uffaf\112\uffaf\123\uffaf\001\002\000\024\013" +
    "\142\043\141\044\144\045\132\046\140\066\124\150\130" +
    "\151\135\153\134\001\002\000\006\060\160\110\161\001" +
    "\002\000\024\013\142\043\141\044\144\045\132\046\140" +
    "\066\124\150\130\151\135\153\134\001\002\000\034\012" +
    "\uffb0\055\uffb0\060\uffb0\063\uffb0\065\uffb0\066\uffb0\072\uffb0" +
    "\073\uffb0\103\uffb0\104\uffb0\110\uffb0\112\uffb0\123\uffb0\001" +
    "\002\000\012\060\uffb6\065\147\066\150\110\uffb6\001\002" +
    "\000\026\013\142\043\141\044\125\045\132\046\140\066" +
    "\124\123\126\150\130\151\135\153\134\001\002\000\026" +
    "\013\142\043\141\044\125\045\132\046\140\066\124\123" +
    "\126\150\130\151\135\153\134\001\002\000\020\012\uffbf" +
    "\055\uffbf\063\uffbf\103\uffbf\104\uffbf\112\uffbf\123\uffbf\001" +
    "\002\000\020\012\uffbe\055\uffbe\063\uffbe\103\164\104\uffbe" +
    "\112\uffbe\123\uffbe\001\002\000\024\013\142\043\141\044" +
    "\144\045\132\046\140\066\124\150\130\151\135\153\134" +
    "\001\002\000\024\013\142\043\141\044\144\045\132\046" +
    "\140\066\124\150\130\151\135\153\134\001\002\000\024" +
    "\012\uffba\055\uffba\063\uffba\065\147\066\150\103\uffba\104" +
    "\uffba\112\uffba\123\uffba\001\002\000\024\012\uffb9\055\uffb9" +
    "\063\uffb9\065\147\066\150\103\uffb9\104\uffb9\112\uffb9\123" +
    "\uffb9\001\002\000\004\044\214\001\002\000\010\010\200" +
    "\060\176\063\177\001\002\000\010\010\uffc5\060\uffc5\063" +
    "\uffc5\001\002\000\004\045\173\001\002\000\026\013\142" +
    "\043\141\044\125\045\132\046\140\066\124\123\126\150" +
    "\130\151\135\153\134\001\002\000\026\013\142\043\141" +
    "\044\125\045\132\046\140\066\124\123\126\150\130\151" +
    "\135\153\134\001\002\000\012\012\202\063\203\103\164" +
    "\104\163\001\002\000\004\111\205\001\002\000\026\013" +
    "\142\043\141\044\125\045\132\046\140\066\124\123\126" +
    "\150\130\151\135\153\134\001\002\000\010\055\uffc3\103" +
    "\164\104\163\001\002\000\026\013\142\043\141\044\125" +
    "\045\132\046\140\066\124\123\126\150\130\151\135\153" +
    "\134\001\002\000\010\103\164\104\163\112\207\001\002" +
    "\000\004\067\210\001\002\000\024\013\142\043\141\044" +
    "\144\045\132\046\140\066\124\150\130\151\135\153\134" +
    "\001\002\000\010\055\uffc4\065\147\066\150\001\002\000" +
    "\010\055\uffc2\103\164\104\163\001\002\000\010\010\uffc6" +
    "\060\uffc6\063\uffc6\001\002\000\010\010\uffc7\060\uffc7\063" +
    "\uffc7\001\002\000\006\060\176\063\216\001\002\000\026" +
    "\013\142\043\141\044\125\045\132\046\140\066\124\123" +
    "\126\150\130\151\135\153\134\001\002\000\010\103\164" +
    "\104\163\123\220\001\002\000\006\074\221\075\222\001" +
    "\002\000\024\013\142\043\141\044\144\045\132\046\140" +
    "\066\124\150\130\151\135\153\134\001\002\000\024\013" +
    "\142\043\141\044\144\045\132\046\140\066\124\150\130" +
    "\151\135\153\134\001\002\000\024\012\uffbd\055\uffbd\063" +
    "\uffbd\065\147\066\150\103\uffbd\104\uffbd\112\uffbd\123\uffbd" +
    "\001\002\000\024\012\uffbc\055\uffbc\063\uffbc\065\147\066" +
    "\150\103\uffbc\104\uffbc\112\uffbc\123\uffbc\001\002\000\020" +
    "\012\uffbb\055\uffbb\063\uffbb\103\uffbb\104\uffbb\112\uffbb\123" +
    "\uffbb\001\002\000\024\013\142\043\141\044\144\045\132" +
    "\046\140\066\124\150\130\151\135\153\134\001\002\000" +
    "\006\060\160\110\230\001\002\000\030\012\uffc0\055\uffc0" +
    "\063\uffc0\065\uffb0\066\uffb0\072\uffb0\073\uffb0\103\uffc0\104" +
    "\uffc0\112\uffc0\123\uffc0\001\002\000\034\012\uffa9\055\uffa9" +
    "\060\uffa9\063\uffa9\065\uffa9\066\uffa9\072\uffa9\073\uffa9\103" +
    "\uffa9\104\uffa9\110\uffa9\112\uffa9\123\uffa9\001\002\000\034" +
    "\012\uffa7\055\uffa7\060\uffa7\063\uffa7\065\uffa7\066\uffa7\072" +
    "\uffa7\073\uffa7\103\uffa7\104\uffa7\110\uffa7\112\uffa7\123\uffa7" +
    "\001\002\000\034\012\uffab\055\uffab\060\uffab\063\uffab\065" +
    "\uffab\066\uffab\072\uffab\073\uffab\103\uffab\104\uffab\110\uffab" +
    "\112\uffab\123\uffab\001\002\000\004\061\240\001\002\000" +
    "\006\061\uffcb\064\236\001\002\000\004\044\235\001\002" +
    "\000\004\061\uffca\001\002\000\010\136\241\137\243\150" +
    "\242\001\002\000\004\055\uffda\001\002\000\004\055\uffdb" +
    "\001\002\000\004\055\uffd9\001\002\000\004\055\uffdc\001" +
    "\002\000\004\063\246\001\002\000\010\026\251\045\132" +
    "\153\134\001\002\000\006\055\uffce\060\uffce\001\002\000" +
    "\006\055\uffd6\060\253\001\002\000\006\045\132\153\134" +
    "\001\002\000\006\055\uffd5\060\253\001\002\000\006\045" +
    "\132\153\134\001\002\000\006\055\uffcf\060\uffcf\001\002" +
    "\000\004\153\256\001\002\000\004\055\uffec\001\002\000" +
    "\056\002\000\004\021\005\031\006\037\014\004\015\032" +
    "\017\036\021\030\022\034\023\015\024\006\027\023\030" +
    "\026\032\012\033\014\034\020\035\010\041\025\042\011" +
    "\047\005\052\033\053\027\001\002\000\004\055\ufffe\001" +
    "\002\000\004\150\266\001\002\000\006\011\263\055\uffdd" +
    "\001\002\000\004\150\264\001\002\000\004\040\265\001" +
    "\002\000\004\055\uffde\001\002\000\004\040\267\001\002" +
    "\000\004\055\uffdf\001\002\000\004\153\271\001\002\000" +
    "\004\055\uffed\001\002\000\004\055\uffd8\001\002\000\004" +
    "\055\uffd7\001\002\000\004\153\300\001\002\000\004\044" +
    "\276\001\002\000\004\153\277\001\002\000\004\055\uffe7" +
    "\001\002\000\004\055\uffe6\001\002\000\004\055\ufff8\001" +
    "\002\000\004\055\ufff4\001\002\000\004\055\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\020\002\034\003\015\022\023\024\006\025" +
    "\021\026\012\027\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\121\001\001\000\002\001\001\000\012\014\136\015" +
    "\130\016\132\020\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\214\010\174\001\001\000\006\007" +
    "\173\010\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\144\014\136\015\145\016\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\136\015" +
    "\151\016\132\001\001\000\010\014\136\015\150\016\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\136\015\153\016\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\156\014\136\015\145\016\132\001" +
    "\001\000\002\001\001\000\010\014\136\015\161\016\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\136\015\130\016\132\020\165\001\001\000\012\014\136" +
    "\015\130\016\132\020\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\136\015\171\016\132\001\001" +
    "\000\010\014\136\015\170\016\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\212\001\001\000\012\014" +
    "\136\015\130\016\132\020\211\001\001\000\012\014\136" +
    "\015\130\016\132\020\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\136\015\130\016\132\020\203" +
    "\001\001\000\002\001\001\000\012\014\136\015\130\016" +
    "\132\020\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\136\015\210\016\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\136\015\130\016\132\020" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\136\015\223\016\132\001\001\000\010\014\136\015" +
    "\222\016\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\226\014\136\015\145\016" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\247\016\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\251\016\246\001\001\000\002" +
    "\001\001\000\004\016\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\023\024\257" +
    "\025\021\026\012\027\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol cur_token){
    throw new PMLParseException("Syntax error", cur_token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PMLParser$actions {
  private final PMLParser parser;

  /** Constructor */
  CUP$PMLParser$actions(PMLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PMLParser$do_action(
    int                        CUP$PMLParser$act_num,
    java_cup.runtime.lr_parser CUP$PMLParser$parser,
    java.util.Stack            CUP$PMLParser$stack,
    int                        CUP$PMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PMLParser$result;

      /* select the action based on the action number */
      switch (CUP$PMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // namedconstant ::= UPPERCASEID 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // namedconstant ::= STRING 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constant ::= MINUS INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.NEGATIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // constant ::= INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.POSITIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constant ::= MINUS DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(-Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // constant ::= DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // constant ::= MINUS NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(-Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constant ::= NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constant ::= LOWERCASEID 
            {
              ParserTerm RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserVariable(v); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= namedconstant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= BINS LPAREN arguments COMMA term RPAREN 
            {
              ParserTerm RESULT =null;
		int binsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int binsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<ParserTerm> bins = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		ParserTerm arg = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserBins(bins, arg); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserTerm RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserFunctionApplication(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term ::= UNDERSCORE 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDontCare(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= term MINUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserMinus(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= term PLUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAdd(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= constant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arguments ::= term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTerm> l = new LinkedList<ParserTerm>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arguments ::= arguments COMMA term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTerm> l = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conjunction ::= formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserFormula> l = new LinkedList<ParserFormula>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conjunction ::= conjunction AND formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserFormula> l = (LinkedList<ParserFormula>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // formula ::= term GREATER term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.GT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // formula ::= term LESSTHAN term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.LT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // formula ::= LOWERCASEID ACYCLIC 
            {
              ParserFormula RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String pred = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAcyclicityConstraint(pred); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // formula ::= BAR quantification COLON formula BAR GEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm lb = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(lb, q, f, new ParserIntConstant(Integer.MAX_VALUE)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // formula ::= BAR quantification COLON formula BAR LEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm ub = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(new ParserIntConstant(Integer.MIN_VALUE),q,f,ub); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // formula ::= formula IMPLIES formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImplies(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // formula ::= formula AND formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserConjunction(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // formula ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserFormula RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAtom(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= FACTOR COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(null,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= FACTOR COLON FOR quantification COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= FACTOR COLON FOR quantification IF formula COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= FACTOR COLON FOR quantification IF formula ADD LSQPAREN formula RSQPAREN TIMES term 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm w = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,w); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-11)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // quantification ::= typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTyping> l = new LinkedList<ParserTyping>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // quantification ::= quantification COMMA typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> l = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typing ::= UPPERCASEID LOWERCASEID 
            {
              ParserTyping RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTyping(type,var); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("typing",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lowercasecommalist ::= LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lowercasecommalist ::= lowercasecommalist COMMA LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // name ::= LOWERCASEID DOT name 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // name ::= LOWERCASEID 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // argtypes ::= UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // argtypes ::= argtypes X UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // namedconstantlist ::= namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserNamedConstant> l = new LinkedList<ParserNamedConstant>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // namedconstantlist ::= namedconstantlist COMMA namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID MINUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"-"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID PLUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"+"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes LPAREN SEQ COLON NUMBER RPAREN 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer seq = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreatePredicate(id,l,Integer.valueOf(seq)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreatePredicate(id,l,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // createType ::= TYPE UPPERCASEID COLON ELLIPSIS namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,true,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // createType ::= TYPE UPPERCASEID COLON namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,false,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CLEAR SCORES 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("scores"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= CLEAR ATOMS 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("atoms"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= SET name ASSIGN FALSE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= SET name ASSIGN TRUE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= SET name ASSIGN NUMBER 
            {
              ParserStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName p = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSet(p, Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= JUMP NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserShift(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= LEARN NUMBER 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= LEARN NUMBER FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),Integer.valueOf(e)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= LEARN FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(-1,Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= LEARN 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserLearn(-1,1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= COLLECT 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserCollect(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= GREEDY 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserGreedy(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= SOLVE 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserSolve(100); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= SOLVE NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSolve(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= ATOMS LOWERCASEID FROM STRING 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(id, s.substring(1,s.length()-1),false,false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= TYPES TO STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveTypes(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= TYPES FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserGenerateTypes(g, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= CORPUS FROM LOWERCASEID STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(factory, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= CORPUS FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= CORPUS FROM STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= CORPUS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= WEIGHTS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadWeights(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= SCORES FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadScores(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= ATOMS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(null, s.substring(1,s.length()-1),false,false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= PRINT WEIGHTS LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserPrintWeights(function); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= PRINT WEIGHTS 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserPrintWeights(null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PRINT ATOMS 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserPrint(null,false,false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PRINT SCORES 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserPrint(null,false,true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= PRINT ATOMS LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserPrint(id,false,false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= INSPECT UPPERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= INSPECT LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= OBSERVED COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.OBSERVED,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= HIDDEN COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.HIDDEN,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= INCLUDE STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImport(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= factor 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFactorFormula f = (ParserFactorFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= createWeightFunction 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateWeightFunction s = (ParserCreateWeightFunction)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= createPredicate 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreatePredicate s = (ParserCreatePredicate)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= createType 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateType s = (ParserCreateType)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserStatement> statements = new LinkedList<ParserStatement>();
               statements.add(stmt);
               RESULT = statements; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program SEMI statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserStatement> program = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 program.add(stmt);
               RESULT = program; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              LinkedList<ParserStatement> RESULT =null;
		 RESULT = new LinkedList<ParserStatement>(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= program SEMI 
            {
              LinkedList<ParserStatement> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> p = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = p; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> start_val = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		RESULT = start_val;
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PMLParser$parser.done_parsing();
          return CUP$PMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

