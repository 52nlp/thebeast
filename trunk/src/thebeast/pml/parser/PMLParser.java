
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 27 20:30:33 GMT 2007
//----------------------------------------------------

package thebeast.pml.parser;

import java.util.LinkedList;
import java_cup.runtime.*;
import thebeast.pml.*;
import thebeast.pml.formula.*;
import thebeast.pml.term.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 27 20:30:33 GMT 2007
  */
public class PMLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PMLParser() {super();}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\024\005\000\002\024\005\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\006" +
    "\000\002\024\013\000\002\024\007\000\002\024\014\000" +
    "\002\024\007\000\002\024\006\000\002\024\014\000\002" +
    "\024\013\000\002\024\006\000\002\024\005\000\002\024" +
    "\006\000\002\024\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\006\000" +
    "\002\024\007\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\024\004\000\002\024\004\000\002\025\006" +
    "\000\002\025\007\000\002\026\006\000\002\026\013\000" +
    "\002\027\010\000\002\027\011\000\002\027\011\000\002" +
    "\005\005\000\002\005\003\000\002\012\005\000\002\012" +
    "\003\000\002\011\003\000\002\011\005\000\002\011\003" +
    "\000\002\011\005\000\002\011\003\000\002\011\005\000" +
    "\002\011\003\000\002\011\005\000\002\013\005\000\002" +
    "\013\003\000\002\010\004\000\002\007\005\000\002\007" +
    "\003\000\002\022\016\000\002\022\012\000\002\022\010" +
    "\000\002\022\005\000\002\020\006\000\002\020\005\000" +
    "\002\020\005\000\002\020\011\000\002\020\011\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\021\005\000\002\021\003\000\002\006\005" +
    "\000\002\006\003\000\002\015\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\003\000\002\015\006\000\002" +
    "\015\010\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\004\000\002\014\003\000\002\014\004" +
    "\000\002\014\003\000\002\014\004\000\002\016\003\000" +
    "\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\060\002\uffff\004\022\005\033\006\040\014" +
    "\004\015\034\021\032\022\036\023\016\024\006\027\024" +
    "\030\027\032\013\033\015\034\021\035\011\041\026\042" +
    "\012\044\031\045\010\051\005\054\035\055\030\001\002" +
    "\000\006\046\330\047\327\001\002\000\004\155\326\001" +
    "\002\000\006\020\322\025\321\001\002\000\004\057\ufffd" +
    "\001\002\000\004\017\305\001\002\000\004\057\uffe1\001" +
    "\002\000\006\015\303\032\304\001\002\000\004\020\301" +
    "\001\002\000\004\057\ufffb\001\002\000\004\057\uffe2\001" +
    "\002\000\010\011\272\057\uffe0\152\273\001\002\000\004" +
    "\057\270\001\002\000\004\057\ufffa\001\002\000\004\020" +
    "\266\001\002\000\004\047\256\001\002\000\004\057\ufffc" +
    "\001\002\000\006\057\uffdb\152\255\001\002\000\004\057" +
    "\ufff9\001\002\000\012\015\100\032\102\034\077\046\103" +
    "\001\002\000\004\065\135\001\002\000\004\065\133\001" +
    "\002\000\004\017\114\001\002\000\012\015\100\032\102" +
    "\034\077\046\103\001\002\000\004\046\067\001\002\000" +
    "\006\020\062\046\063\001\002\000\004\065\055\001\002" +
    "\000\006\057\uffe3\152\054\001\002\000\004\002\053\001" +
    "\002\000\004\046\041\001\002\000\004\065\042\001\002" +
    "\000\004\047\043\001\002\000\012\007\uffcb\057\uffcb\111" +
    "\uffcb\126\uffcb\001\002\000\006\007\046\126\045\001\002" +
    "\000\004\047\050\001\002\000\004\047\047\001\002\000" +
    "\012\007\uffcc\057\uffcc\111\uffcc\126\uffcc\001\002\000\010" +
    "\057\uffd1\067\051\070\052\001\002\000\004\057\uffd0\001" +
    "\002\000\004\057\uffcf\001\002\000\004\002\001\001\002" +
    "\000\004\057\uffe4\001\002\000\004\046\057\001\002\000" +
    "\006\057\ufff7\062\060\001\002\000\006\057\uffc1\062\uffc1" +
    "\001\002\000\004\046\061\001\002\000\006\057\uffc2\062" +
    "\uffc2\001\002\000\004\155\066\001\002\000\004\020\064" +
    "\001\002\000\004\155\065\001\002\000\004\057\uffe5\001" +
    "\002\000\004\057\ufff2\001\002\000\004\065\070\001\002" +
    "\000\004\047\043\001\002\000\010\007\046\057\uffd3\111" +
    "\072\001\002\000\004\037\073\001\002\000\004\065\074" +
    "\001\002\000\004\152\075\001\002\000\004\112\076\001" +
    "\002\000\004\057\uffd2\001\002\000\010\057\uffc6\063\uffc6" +
    "\066\112\001\002\000\010\057\uffc8\063\uffc8\066\110\001" +
    "\002\000\004\057\ufff3\001\002\000\010\057\uffc4\063\uffc4" +
    "\066\106\001\002\000\010\057\uffca\063\uffca\066\104\001" +
    "\002\000\012\015\100\032\102\034\077\046\103\001\002" +
    "\000\006\057\uffc9\063\uffc9\001\002\000\012\015\100\032" +
    "\102\034\077\046\103\001\002\000\006\057\uffc3\063\uffc3" +
    "\001\002\000\012\015\100\032\102\034\077\046\103\001" +
    "\002\000\006\057\uffc7\063\uffc7\001\002\000\012\015\100" +
    "\032\102\034\077\046\103\001\002\000\006\057\uffc5\063" +
    "\uffc5\001\002\000\004\020\115\001\002\000\006\046\117" +
    "\155\116\001\002\000\006\057\uffef\111\126\001\002\000" +
    "\004\155\120\001\002\000\006\057\uffed\111\121\001\002" +
    "\000\004\152\122\001\002\000\004\070\123\001\002\000" +
    "\004\152\124\001\002\000\004\112\125\001\002\000\004" +
    "\057\uffec\001\002\000\004\152\127\001\002\000\004\070" +
    "\130\001\002\000\004\152\131\001\002\000\004\112\132" +
    "\001\002\000\004\057\uffee\001\002\000\004\046\057\001" +
    "\002\000\006\057\ufff6\062\060\001\002\000\030\011\140" +
    "\013\154\043\153\046\137\047\143\050\152\070\136\125" +
    "\141\152\142\153\147\155\146\001\002\000\010\050\246" +
    "\152\247\153\245\001\002\000\020\031\241\067\uffa5\070" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\111\242\001\002\000\004" +
    "\047\207\001\002\000\004\047\207\001\002\000\036\012" +
    "\uffa4\057\uffa4\062\uffa4\065\uffa4\067\uffa4\070\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\105\uffa4\106\uffa4\112\uffa4\114\uffa4\125" +
    "\uffa4\001\002\000\036\012\uff9d\057\uff9d\062\uff9d\065\uff9d" +
    "\067\uff9d\070\uff9d\073\uff9d\074\uff9d\075\uff9d\105\uff9d\106" +
    "\uff9d\112\uff9d\114\uff9d\125\uff9d\001\002\000\014\067\161" +
    "\070\162\073\202\074\203\075\201\001\002\000\036\012" +
    "\uffa6\057\uffa6\062\uffa6\065\uffa6\067\uffa6\070\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\105\uffa6\106\uffa6\112\uffa6\114\uffa6\125" +
    "\uffa6\001\002\000\036\012\uff9e\057\uff9e\062\uff9e\065\uff9e" +
    "\067\uff9e\070\uff9e\073\uff9e\074\uff9e\075\uff9e\105\uff9e\106" +
    "\uff9e\112\uff9e\114\uff9e\125\uff9e\001\002\000\036\012\uffa2" +
    "\057\uffa2\062\uffa2\065\uffa2\067\uffa2\070\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\105\uffa2\106\uffa2\112\uffa2\114\uffa2\125\uffa2" +
    "\001\002\000\010\057\uffba\105\176\106\175\001\002\000" +
    "\036\012\uffac\057\uffac\062\uffac\065\uffac\067\uffac\070\uffac" +
    "\073\uffac\074\uffac\075\uffac\105\uffac\106\uffac\112\uffac\114" +
    "\uffac\125\uffac\001\002\000\036\012\uffa0\057\uffa0\062\uffa0" +
    "\065\uffa0\067\uffa0\070\uffa0\073\uffa0\074\uffa0\075\uffa0\105" +
    "\uffa0\106\uffa0\112\uffa0\114\uffa0\125\uffa0\001\002\000\004" +
    "\111\155\001\002\000\036\012\uffa9\057\uffa9\062\uffa9\065" +
    "\uffa9\067\uffa9\070\uffa9\073\uffa9\074\uffa9\075\uffa9\105\uffa9" +
    "\106\uffa9\112\uffa9\114\uffa9\125\uffa9\001\002\000\024\013" +
    "\154\043\153\046\156\047\143\050\152\070\136\152\142" +
    "\153\147\155\146\001\002\000\040\012\uffa5\057\uffa5\062" +
    "\uffa5\065\uffa5\067\uffa5\070\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\105\uffa5\106\uffa5\111\170\112\uffa5\114\uffa5\125\uffa5\001" +
    "\002\000\004\062\165\001\002\000\012\062\uffad\067\161" +
    "\070\162\112\uffad\001\002\000\024\013\154\043\153\046" +
    "\156\047\143\050\152\070\136\152\142\153\147\155\146" +
    "\001\002\000\024\013\154\043\153\046\156\047\143\050" +
    "\152\070\136\152\142\153\147\155\146\001\002\000\036" +
    "\012\uffaa\057\uffaa\062\uffaa\065\uffaa\067\uffaa\070\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\105\uffaa\106\uffaa\112\uffaa\114\uffaa" +
    "\125\uffaa\001\002\000\036\012\uffab\057\uffab\062\uffab\065" +
    "\uffab\067\uffab\070\uffab\073\uffab\074\uffab\075\uffab\105\uffab" +
    "\106\uffab\112\uffab\114\uffab\125\uffab\001\002\000\024\013" +
    "\154\043\153\046\156\047\143\050\152\070\136\152\142" +
    "\153\147\155\146\001\002\000\012\062\uffae\067\161\070" +
    "\162\112\167\001\002\000\036\012\uffa7\057\uffa7\062\uffa7" +
    "\065\uffa7\067\uffa7\070\uffa7\073\uffa7\074\uffa7\075\uffa7\105" +
    "\uffa7\106\uffa7\112\uffa7\114\uffa7\125\uffa7\001\002\000\024" +
    "\013\154\043\153\046\156\047\143\050\152\070\136\152" +
    "\142\153\147\155\146\001\002\000\006\062\172\112\173" +
    "\001\002\000\024\013\154\043\153\046\156\047\143\050" +
    "\152\070\136\152\142\153\147\155\146\001\002\000\036" +
    "\012\uffa8\057\uffa8\062\uffa8\065\uffa8\067\uffa8\070\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\105\uffa8\106\uffa8\112\uffa8\114\uffa8" +
    "\125\uffa8\001\002\000\012\062\uffae\067\161\070\162\112" +
    "\uffae\001\002\000\026\013\154\043\153\046\137\047\143" +
    "\050\152\070\136\125\141\152\142\153\147\155\146\001" +
    "\002\000\026\013\154\043\153\046\137\047\143\050\152" +
    "\070\136\125\141\152\142\153\147\155\146\001\002\000" +
    "\020\012\uffb8\057\uffb8\065\uffb8\105\uffb8\106\uffb8\114\uffb8" +
    "\125\uffb8\001\002\000\020\012\uffb7\057\uffb7\065\uffb7\105" +
    "\176\106\uffb7\114\uffb7\125\uffb7\001\002\000\024\013\154" +
    "\043\153\046\156\047\143\050\152\070\136\152\142\153" +
    "\147\155\146\001\002\000\024\013\154\043\153\046\156" +
    "\047\143\050\152\070\136\152\142\153\147\155\146\001" +
    "\002\000\024\013\154\043\153\046\156\047\143\050\152" +
    "\070\136\152\142\153\147\155\146\001\002\000\024\012" +
    "\uffb3\057\uffb3\065\uffb3\067\161\070\162\105\uffb3\106\uffb3" +
    "\114\uffb3\125\uffb3\001\002\000\024\012\uffb1\057\uffb1\065" +
    "\uffb1\067\161\070\162\105\uffb1\106\uffb1\114\uffb1\125\uffb1" +
    "\001\002\000\024\012\uffb2\057\uffb2\065\uffb2\067\161\070" +
    "\162\105\uffb2\106\uffb2\114\uffb2\125\uffb2\001\002\000\004" +
    "\046\223\001\002\000\006\062\212\065\213\001\002\000" +
    "\010\010\uffbe\062\uffbe\065\uffbe\001\002\000\004\047\207" +
    "\001\002\000\026\013\154\043\153\046\137\047\143\050" +
    "\152\070\136\125\141\152\142\153\147\155\146\001\002" +
    "\000\010\105\176\106\175\125\215\001\002\000\006\076" +
    "\216\077\217\001\002\000\024\013\154\043\153\046\156" +
    "\047\143\050\152\070\136\152\142\153\147\155\146\001" +
    "\002\000\024\013\154\043\153\046\156\047\143\050\152" +
    "\070\136\152\142\153\147\155\146\001\002\000\024\012" +
    "\uffb6\057\uffb6\065\uffb6\067\161\070\162\105\uffb6\106\uffb6" +
    "\114\uffb6\125\uffb6\001\002\000\024\012\uffb5\057\uffb5\065" +
    "\uffb5\067\161\070\162\105\uffb5\106\uffb5\114\uffb5\125\uffb5" +
    "\001\002\000\010\010\uffbf\062\uffbf\065\uffbf\001\002\000" +
    "\010\010\uffc0\062\uffc0\065\uffc0\001\002\000\010\010\226" +
    "\062\212\065\225\001\002\000\026\013\154\043\153\046" +
    "\137\047\143\050\152\070\136\125\141\152\142\153\147" +
    "\155\146\001\002\000\026\013\154\043\153\046\137\047" +
    "\143\050\152\070\136\125\141\152\142\153\147\155\146" +
    "\001\002\000\012\012\230\065\231\105\176\106\175\001" +
    "\002\000\004\113\233\001\002\000\026\013\154\043\153" +
    "\046\137\047\143\050\152\070\136\125\141\152\142\153" +
    "\147\155\146\001\002\000\010\057\uffbc\105\176\106\175" +
    "\001\002\000\026\013\154\043\153\046\137\047\143\050" +
    "\152\070\136\125\141\152\142\153\147\155\146\001\002" +
    "\000\010\105\176\106\175\114\235\001\002\000\004\071" +
    "\236\001\002\000\024\013\154\043\153\046\156\047\143" +
    "\050\152\070\136\152\142\153\147\155\146\001\002\000" +
    "\010\057\uffbd\067\161\070\162\001\002\000\010\057\uffbb" +
    "\105\176\106\175\001\002\000\020\012\uffb4\057\uffb4\065" +
    "\uffb4\105\uffb4\106\uffb4\114\uffb4\125\uffb4\001\002\000\024" +
    "\013\154\043\153\046\156\047\143\050\152\070\136\152" +
    "\142\153\147\155\146\001\002\000\006\062\172\112\244" +
    "\001\002\000\032\012\uffb9\057\uffb9\065\uffb9\067\uffa8\070" +
    "\uffa8\073\uffa8\074\uffa8\075\uffa8\105\uffb9\106\uffb9\114\uffb9" +
    "\125\uffb9\001\002\000\036\012\uffa1\057\uffa1\062\uffa1\065" +
    "\uffa1\067\uffa1\070\uffa1\073\uffa1\074\uffa1\075\uffa1\105\uffa1" +
    "\106\uffa1\112\uffa1\114\uffa1\125\uffa1\001\002\000\036\012" +
    "\uff9f\057\uff9f\062\uff9f\065\uff9f\067\uff9f\070\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\105\uff9f\106\uff9f\112\uff9f\114\uff9f\125" +
    "\uff9f\001\002\000\036\012\uffa3\057\uffa3\062\uffa3\065\uffa3" +
    "\067\uffa3\070\uffa3\073\uffa3\074\uffa3\075\uffa3\105\uffa3\106" +
    "\uffa3\112\uffa3\114\uffa3\125\uffa3\001\002\000\004\063\251" +
    "\001\002\000\010\140\252\141\254\152\253\001\002\000" +
    "\004\057\uffd9\001\002\000\004\057\uffda\001\002\000\004" +
    "\057\uffd8\001\002\000\004\057\uffdc\001\002\000\004\065" +
    "\257\001\002\000\010\026\262\047\143\155\146\001\002" +
    "\000\006\057\uffcd\062\uffcd\001\002\000\006\057\uffd5\062" +
    "\264\001\002\000\006\047\143\155\146\001\002\000\006" +
    "\057\uffd4\062\264\001\002\000\006\047\143\155\146\001" +
    "\002\000\006\057\uffce\062\uffce\001\002\000\004\155\267" +
    "\001\002\000\004\057\ufff0\001\002\000\060\002\000\004" +
    "\022\005\033\006\040\014\004\015\034\021\032\022\036" +
    "\023\016\024\006\027\024\030\027\032\013\033\015\034" +
    "\021\035\011\041\026\042\012\044\031\045\010\051\005" +
    "\054\035\055\030\001\002\000\004\057\ufffe\001\002\000" +
    "\004\152\277\001\002\000\006\011\274\057\uffdd\001\002" +
    "\000\004\152\275\001\002\000\004\040\276\001\002\000" +
    "\004\057\uffde\001\002\000\004\040\300\001\002\000\004" +
    "\057\uffdf\001\002\000\004\155\302\001\002\000\004\057" +
    "\ufff1\001\002\000\004\057\uffd7\001\002\000\004\057\uffd6" +
    "\001\002\000\006\025\306\111\307\001\002\000\004\046" +
    "\317\001\002\000\004\152\310\001\002\000\004\070\311" +
    "\001\002\000\004\152\312\001\002\000\004\112\313\001" +
    "\002\000\004\025\314\001\002\000\004\046\315\001\002" +
    "\000\006\057\uffe8\155\316\001\002\000\004\057\uffe9\001" +
    "\002\000\006\057\uffea\155\320\001\002\000\004\057\uffeb" +
    "\001\002\000\004\155\325\001\002\000\004\046\323\001" +
    "\002\000\004\155\324\001\002\000\004\057\uffe7\001\002" +
    "\000\004\057\uffe6\001\002\000\004\057\ufff8\001\002\000" +
    "\004\057\ufff4\001\002\000\004\057\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\020\002\036\003\016\022\024\024\006\025" +
    "\022\026\013\027\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\104\001\001\000\002\001\001\000\004\011" +
    "\106\001\001\000\002\001\001\000\004\011\110\001\001" +
    "\000\002\001\001\000\004\011\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\133" +
    "\001\001\000\002\001\001\000\012\014\150\015\143\016" +
    "\144\020\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\223\010\210\001\001\000\006\007\207\010" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\156\014" +
    "\150\015\157\016\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\150\015\163\016" +
    "\144\001\001\000\010\014\150\015\162\016\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\150\015" +
    "\165\016\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\170\014\150\015\157\016\144\001\001\000" +
    "\002\001\001\000\010\014\150\015\173\016\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\150\015" +
    "\143\016\144\020\177\001\001\000\012\014\150\015\143" +
    "\016\144\020\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\150\015\205\016\144\001\001\000\010" +
    "\014\150\015\204\016\144\001\001\000\010\014\150\015" +
    "\203\016\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\221\001\001\000\012\014\150" +
    "\015\143\016\144\020\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\150\015\220\016\144\001\001" +
    "\000\010\014\150\015\217\016\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\150\015\143\016\144\020" +
    "\237\001\001\000\012\014\150\015\143\016\144\020\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\150\015\143\016\144\020\231\001\001\000\002\001\001" +
    "\000\012\014\150\015\143\016\144\020\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\150\015\236" +
    "\016\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\242\014\150\015\157\016\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\260\016\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\262\016\257\001\001\000\002\001\001" +
    "\000\004\016\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\024\024\270\025\022" +
    "\026\013\027\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol cur_token){
    throw new PMLParseException("Syntax error", cur_token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PMLParser$actions {
  private final PMLParser parser;

  /** Constructor */
  CUP$PMLParser$actions(PMLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PMLParser$do_action(
    int                        CUP$PMLParser$act_num,
    java_cup.runtime.lr_parser CUP$PMLParser$parser,
    java.util.Stack            CUP$PMLParser$stack,
    int                        CUP$PMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PMLParser$result;

      /* select the action based on the action number */
      switch (CUP$PMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // namedconstant ::= UPPERCASEID 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // namedconstant ::= STRING 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // constant ::= MINUS INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.NEGATIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constant ::= INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.POSITIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // constant ::= MINUS DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(-Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // constant ::= DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // constant ::= MINUS NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(-Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // constant ::= NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // constant ::= LOWERCASEID 
            {
              ParserTerm RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserVariable(v); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // constant ::= namedconstant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= BINS LPAREN arguments COMMA term RPAREN 
            {
              ParserTerm RESULT =null;
		int binsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int binsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<ParserTerm> bins = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		ParserTerm arg = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserBins(bins, arg); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserTerm RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserFunctionApplication(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term ::= UNDERSCORE 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDontCare(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term ::= term MINUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserMinus(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // term ::= term PLUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAdd(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // term ::= constant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arguments ::= term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTerm> l = new LinkedList<ParserTerm>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arguments ::= arguments COMMA term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTerm> l = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conjunction ::= formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserFormula> l = new LinkedList<ParserFormula>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conjunction ::= conjunction AND formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserFormula> l = (LinkedList<ParserFormula>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formula ::= term NOTEQUALS term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.NEQ, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formula ::= term GREATER term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.GT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // formula ::= term LESSTHAN term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.LT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formula ::= LOWERCASEID ACYCLIC 
            {
              ParserFormula RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String pred = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAcyclicityConstraint(pred); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // formula ::= BAR quantification COLON formula BAR GEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm lb = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(lb, q, f, new ParserIntConstant(Integer.MAX_VALUE)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // formula ::= BAR quantification COLON formula BAR LEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm ub = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(new ParserIntConstant(Integer.MIN_VALUE),q,f,ub); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // formula ::= formula IMPLIES formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImplies(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // formula ::= formula AND formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserConjunction(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // formula ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserFormula RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAtom(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= FACTOR COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(null,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= FACTOR COLON FOR quantification COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= FACTOR COLON FOR quantification IF formula COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= FACTOR COLON FOR quantification IF formula ADD LSQPAREN formula RSQPAREN TIMES term 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm w = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,w); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-11)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // quantification ::= typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTyping> l = new LinkedList<ParserTyping>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // quantification ::= quantification COMMA typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> l = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // typing ::= UPPERCASEID LOWERCASEID 
            {
              ParserTyping RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTyping(type,var); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("typing",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lowercasecommalist ::= LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lowercasecommalist ::= lowercasecommalist COMMA LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // name ::= SCORES DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("scores",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // name ::= SCORES 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("scores",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // name ::= WEIGHTS DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("weights",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // name ::= WEIGHTS 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("weights",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // name ::= ATOMS DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("atoms",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // name ::= ATOMS 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("atoms",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // name ::= LOWERCASEID DOT name 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // name ::= LOWERCASEID 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // argtypes ::= UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // argtypes ::= argtypes X UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // namedconstantlist ::= namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserNamedConstant> l = new LinkedList<ParserNamedConstant>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // namedconstantlist ::= namedconstantlist COMMA namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID MINUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"-"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID PLUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"+"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes LPAREN SEQ COLON NUMBER RPAREN 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer seq = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreatePredicate(id,l,Integer.valueOf(seq)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreatePredicate(id,l,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // createType ::= TYPE UPPERCASEID COLON ELLIPSIS namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,true,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // createType ::= TYPE UPPERCASEID COLON namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,false,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= CLEAR SCORES 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("scores"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CLEAR ATOMS 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("atoms"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= SET name ASSIGN FALSE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= SET name ASSIGN TRUE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= SET name ASSIGN NUMBER 
            {
              ParserStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName p = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSet(p, Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= JUMP 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserShift(1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= JUMP NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserShift(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= LEARN NUMBER 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= LEARN NUMBER FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),Integer.valueOf(e)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= LEARN FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(-1,Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= LEARN 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserLearn(-1,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= COLLECT 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserCollect(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= GREEDY 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserGreedy(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= SOLVE 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserSolve(100); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= SOLVE NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSolve(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= ATOMS LOWERCASEID FROM STRING 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(id, s.substring(1,s.length()-1),false,false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= TYPES TO STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveTypes(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= TYPES FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserGenerateTypes(g, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= SAVE CORPUS LPAREN NUMBER MINUS NUMBER RPAREN TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(factory, null,Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= SAVE CORPUS LPAREN NUMBER MINUS NUMBER RPAREN TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(factory, s.substring(1,s.length()-1),Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= SAVE CORPUS TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(f, null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= SAVE CORPUS TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= LOAD CORPUS FROM LOWERCASEID STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(factory, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= LOAD CORPUS FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= LOAD CORPUS FROM STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= LOAD CORPUS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WEIGHTS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadWeights(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= SCORES FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadScores(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= ATOMS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(null, s.substring(1,s.length()-1),false,false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= PRINT name 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserPrint(n); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= INSPECT UPPERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= INSPECT LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= OBSERVED COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.OBSERVED,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= HIDDEN COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.HIDDEN,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= INCLUDE STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImport(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= factor 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFactorFormula f = (ParserFactorFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= createWeightFunction 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateWeightFunction s = (ParserCreateWeightFunction)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= createPredicate 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreatePredicate s = (ParserCreatePredicate)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= createType 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateType s = (ParserCreateType)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserStatement> statements = new LinkedList<ParserStatement>();
               statements.add(stmt);
               RESULT = statements; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program SEMI statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserStatement> program = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 program.add(stmt);
               RESULT = program; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              LinkedList<ParserStatement> RESULT =null;
		 RESULT = new LinkedList<ParserStatement>(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= program SEMI 
            {
              LinkedList<ParserStatement> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> p = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = p; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> start_val = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		RESULT = start_val;
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PMLParser$parser.done_parsing();
          return CUP$PMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

