#summary One-sentence Tutorial using Semantic Role Labelling

= Introduction =

This page will give a brief tutorial that covers some of thebeast's features. As task we look at a vanilla version of Semantic Role Labelling (SRL): finding out which are arguments of a verb and what roles do they play. For example, in

 Haag plays Elianti

Haag is the agent ("A0") and Elianti the patient ("A1") of the verb "play". 

The MLN we describe here can be found in {{{examples/srl/toy.pml}}}. 

= Defining Types =
First we define the types of constants that will appear in our world. We will save these definitions in an external file {{{srl-types.pml}}} (this is not mandatory, they could also be in {{{toy.pml}}}.
{{{
type Word: ...;
type Pos: ...;
type Role: ...;
}}}
Here {{{Word}}} is a set of words, {{{Pos}}} a set of Part Of Speech tags and {{{Role}}} the set of possible roles arguments can have. 

Note that Instead of explicitely defining the constants we use the "..." notation to indicate that constants should be added when seen in the data. We could also write 
{{{
type Role: "A0","A1";
}}}

= Adding Data ==
Now we will add some training data. In Markov Logic data is defined in terms of possible worlds: collections of ground atoms. We write a set of possible worlds into a {{{train.atoms}}} file:
{{{
>>
>word
0 "Haag"
1 "plays"
2 "Elianti"
3 "."

>role
1 0 "A0"
1 2 "A1"

>pos
0 "NNP"
1 "VBZ"
2 "NNP"
3 "P"

>>
>word
0 "He"
1 "plays"
2 "the"
3 "fool"
4 "."

>role
1 0 "A0"
1 3 "A1"

>pos
0 "NNP"
1 "VBZ"
2 "DT"
3 "NN"
4 "P"
}}}

and a slightly different set of atoms into {{{test.atoms}}}.

