
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 08 02:12:28 GMT 2007
//----------------------------------------------------

package thebeast.pml.parser;

import java.util.LinkedList;
import java_cup.runtime.*;
import thebeast.pml.*;
import thebeast.pml.formula.*;
import thebeast.pml.term.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 08 02:12:28 GMT 2007
  */
public class PMLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PMLParser() {super();}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\010\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\006\000\002\025\007\000\002\025\006\000" +
    "\002\025\013\000\002\025\007\000\002\025\014\000\002" +
    "\025\006\000\002\025\005\000\002\025\007\000\002\025" +
    "\007\000\002\025\006\000\002\025\014\000\002\025\013" +
    "\000\002\025\006\000\002\025\005\000\002\025\006\000" +
    "\002\025\004\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\006\000\002\025" +
    "\007\000\002\025\004\000\002\025\004\000\002\025\005" +
    "\000\002\025\003\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\004\000\002" +
    "\025\004\000\002\026\006\000\002\026\007\000\002\027" +
    "\006\000\002\027\013\000\002\030\010\000\002\030\011" +
    "\000\002\030\011\000\002\005\005\000\002\005\003\000" +
    "\002\013\005\000\002\013\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\012" +
    "\003\000\002\012\005\000\002\012\003\000\002\012\005" +
    "\000\002\012\003\000\002\012\005\000\002\012\003\000" +
    "\002\012\005\000\002\014\005\000\002\014\003\000\002" +
    "\011\004\000\002\007\005\000\002\007\003\000\002\023" +
    "\016\000\002\023\014\000\002\023\012\000\002\023\010" +
    "\000\002\023\005\000\002\021\006\000\002\021\005\000" +
    "\002\021\005\000\002\021\011\000\002\021\011\000\002" +
    "\021\004\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\021\005\000\002\022\005\000\002\022\003\000" +
    "\002\006\005\000\002\006\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\016" +
    "\006\000\002\016\010\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\003\000\002\015\004\000\002" +
    "\015\003\000\002\015\004\000\002\017\003\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\064\002\uffff\004\023\005\034\006\042\014" +
    "\004\015\035\021\033\022\037\023\017\024\006\027\025" +
    "\030\030\032\014\033\016\034\022\035\012\041\027\042" +
    "\013\044\032\045\010\046\011\047\041\053\005\056\036" +
    "\057\031\001\002\000\006\050\u0104\051\u0103\001\002\000" +
    "\004\157\u0102\001\002\000\006\020\376\025\375\001\002" +
    "\000\004\061\ufffd\001\002\000\014\015\114\017\356\032" +
    "\116\034\113\050\117\001\002\000\004\025\352\001\002" +
    "\000\004\061\uffdb\001\002\000\006\015\350\032\351\001" +
    "\002\000\004\020\346\001\002\000\004\061\ufffb\001\002" +
    "\000\004\061\uffdc\001\002\000\010\011\337\061\uffda\154" +
    "\340\001\002\000\004\061\335\001\002\000\004\061\ufffa" +
    "\001\002\000\004\020\333\001\002\000\004\051\323\001" +
    "\002\000\004\061\ufffc\001\002\000\010\061\uffd4\072\321" +
    "\154\320\001\002\000\004\061\ufff9\001\002\000\012\015" +
    "\114\032\116\034\113\050\117\001\002\000\004\067\156" +
    "\001\002\000\004\067\154\001\002\000\014\015\114\017" +
    "\131\032\116\034\113\050\117\001\002\000\012\015\114" +
    "\032\116\034\113\050\117\001\002\000\004\050\103\001" +
    "\002\000\006\020\076\050\077\001\002\000\004\067\071" +
    "\001\002\000\006\061\uffdd\154\070\001\002\000\004\002" +
    "\067\001\002\000\004\067\055\001\002\000\004\050\043" +
    "\001\002\000\004\067\044\001\002\000\004\051\045\001" +
    "\002\000\012\007\uffc3\061\uffc3\113\uffc3\130\uffc3\001\002" +
    "\000\006\007\050\130\047\001\002\000\004\051\052\001" +
    "\002\000\004\051\051\001\002\000\012\007\uffc4\061\uffc4" +
    "\113\uffc4\130\uffc4\001\002\000\010\061\uffc9\071\053\072" +
    "\054\001\002\000\004\061\uffc8\001\002\000\004\061\uffc7" +
    "\001\002\000\004\050\056\001\002\000\004\113\057\001" +
    "\002\000\006\013\060\073\061\001\002\000\006\064\uffbf" +
    "\114\uffbf\001\002\000\006\064\uffc0\114\uffc0\001\002\000" +
    "\006\064\063\114\064\001\002\000\006\013\065\073\066" +
    "\001\002\000\004\061\ufff8\001\002\000\006\064\uffc1\114" +
    "\uffc1\001\002\000\006\064\uffc2\114\uffc2\001\002\000\004" +
    "\002\001\001\002\000\004\061\uffde\001\002\000\004\050" +
    "\073\001\002\000\006\061\ufff6\064\074\001\002\000\006" +
    "\061\uffb5\064\uffb5\001\002\000\004\050\075\001\002\000" +
    "\006\061\uffb6\064\uffb6\001\002\000\004\157\102\001\002" +
    "\000\004\020\100\001\002\000\004\157\101\001\002\000" +
    "\004\061\uffdf\001\002\000\004\061\ufff1\001\002\000\004" +
    "\067\104\001\002\000\004\051\045\001\002\000\010\007" +
    "\050\061\uffcb\113\106\001\002\000\004\037\107\001\002" +
    "\000\004\067\110\001\002\000\004\154\111\001\002\000" +
    "\004\114\112\001\002\000\004\061\uffca\001\002\000\014" +
    "\020\uffba\025\uffba\061\uffba\065\uffba\070\126\001\002\000" +
    "\014\020\uffbc\025\uffbc\061\uffbc\065\uffbc\070\124\001\002" +
    "\000\004\061\ufff2\001\002\000\014\020\uffb8\025\uffb8\061" +
    "\uffb8\065\uffb8\070\122\001\002\000\014\020\uffbe\025\uffbe" +
    "\061\uffbe\065\uffbe\070\120\001\002\000\012\015\114\032" +
    "\116\034\113\050\117\001\002\000\012\020\uffbd\025\uffbd" +
    "\061\uffbd\065\uffbd\001\002\000\012\015\114\032\116\034" +
    "\113\050\117\001\002\000\012\020\uffb7\025\uffb7\061\uffb7" +
    "\065\uffb7\001\002\000\012\015\114\032\116\034\113\050" +
    "\117\001\002\000\012\020\uffbb\025\uffbb\061\uffbb\065\uffbb" +
    "\001\002\000\012\015\114\032\116\034\113\050\117\001" +
    "\002\000\012\020\uffb9\025\uffb9\061\uffb9\065\uffb9\001\002" +
    "\000\004\020\150\001\002\000\004\020\132\001\002\000" +
    "\006\050\134\157\133\001\002\000\006\061\uffec\113\143" +
    "\001\002\000\004\157\135\001\002\000\006\061\uffea\113" +
    "\136\001\002\000\004\154\137\001\002\000\004\072\140" +
    "\001\002\000\004\154\141\001\002\000\004\114\142\001" +
    "\002\000\004\061\uffe9\001\002\000\004\154\144\001\002" +
    "\000\004\072\145\001\002\000\004\154\146\001\002\000" +
    "\004\114\147\001\002\000\004\061\uffeb\001\002\000\006" +
    "\050\152\157\151\001\002\000\004\061\uffee\001\002\000" +
    "\004\157\153\001\002\000\004\061\uffed\001\002\000\004" +
    "\050\073\001\002\000\006\061\ufff5\064\074\001\002\000" +
    "\040\011\175\013\160\043\200\050\174\051\177\052\165" +
    "\072\172\102\162\113\164\127\176\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\010\061\uffad\107\231" +
    "\110\230\001\002\000\042\012\uff98\061\uff98\064\uff98\067" +
    "\uff98\071\uff98\072\uff98\075\uff98\076\uff98\077\uff98\100\uff98" +
    "\101\uff98\107\uff98\110\uff98\114\uff98\116\uff98\127\uff98\001" +
    "\002\000\042\012\uff9b\061\uff9b\064\uff9b\067\uff9b\071\uff9b" +
    "\072\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\107" +
    "\uff9b\110\uff9b\114\uff9b\116\uff9b\127\uff9b\001\002\000\036" +
    "\013\160\043\200\050\174\051\177\052\165\072\172\102" +
    "\162\113\164\127\176\142\163\143\171\154\167\155\201" +
    "\157\166\001\002\000\042\012\uff92\061\uff92\064\uff92\067" +
    "\uff92\071\uff92\072\uff92\075\uff92\076\uff92\077\uff92\100\uff92" +
    "\101\uff92\107\uff92\110\uff92\114\uff92\116\uff92\127\uff92\001" +
    "\002\000\036\013\160\043\200\050\174\051\177\052\165" +
    "\072\172\102\162\113\164\127\176\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\042\012\uff8d\061\uff8d" +
    "\064\uff8d\067\uff8d\071\uff8d\072\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\107\uff8d\110\uff8d\114\uff8d\116\uff8d" +
    "\127\uff8d\001\002\000\042\012\uff8b\061\uff8b\064\uff8b\067" +
    "\uff8b\071\uff8b\072\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b" +
    "\101\uff8b\107\uff8b\110\uff8b\114\uff8b\116\uff8b\127\uff8b\001" +
    "\002\000\042\012\uff93\061\uff93\064\uff93\067\uff93\071\uff93" +
    "\072\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93\107" +
    "\uff93\110\uff93\114\uff93\116\uff93\127\uff93\001\002\000\020" +
    "\071\206\072\207\075\277\076\301\077\276\100\275\101" +
    "\300\001\002\000\042\012\uff91\061\uff91\064\uff91\067\uff91" +
    "\071\uff91\072\uff91\075\uff91\076\uff91\077\uff91\100\uff91\101" +
    "\uff91\107\uff91\110\uff91\114\uff91\116\uff91\127\uff91\001\002" +
    "\000\010\052\272\154\274\155\273\001\002\000\042\012" +
    "\uff95\061\uff95\064\uff95\067\uff95\071\uff95\072\uff95\075\uff95" +
    "\076\uff95\077\uff95\100\uff95\101\uff95\107\uff95\110\uff95\114" +
    "\uff95\116\uff95\127\uff95\001\002\000\024\031\266\071\uff94" +
    "\072\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\113" +
    "\267\001\002\000\004\051\222\001\002\000\004\051\222" +
    "\001\002\000\042\012\uff8a\061\uff8a\064\uff8a\067\uff8a\071" +
    "\uff8a\072\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a" +
    "\107\uff8a\110\uff8a\114\uff8a\116\uff8a\127\uff8a\001\002\000" +
    "\004\113\202\001\002\000\042\012\uff8f\061\uff8f\064\uff8f" +
    "\067\uff8f\071\uff8f\072\uff8f\075\uff8f\076\uff8f\077\uff8f\100" +
    "\uff8f\101\uff8f\107\uff8f\110\uff8f\114\uff8f\116\uff8f\127\uff8f" +
    "\001\002\000\030\013\160\043\200\050\203\051\177\052" +
    "\165\072\172\142\163\143\171\154\167\155\201\157\166" +
    "\001\002\000\044\012\uff94\061\uff94\064\uff94\067\uff94\071" +
    "\uff94\072\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94" +
    "\107\uff94\110\uff94\113\215\114\uff94\116\uff94\127\uff94\001" +
    "\002\000\004\064\212\001\002\000\012\064\uff9c\071\206" +
    "\072\207\114\uff9c\001\002\000\030\013\160\043\200\050" +
    "\203\051\177\052\165\072\172\142\163\143\171\154\167" +
    "\155\201\157\166\001\002\000\030\013\160\043\200\050" +
    "\203\051\177\052\165\072\172\142\163\143\171\154\167" +
    "\155\201\157\166\001\002\000\042\012\uff99\061\uff99\064" +
    "\uff99\067\uff99\071\uff99\072\uff99\075\uff99\076\uff99\077\uff99" +
    "\100\uff99\101\uff99\107\uff99\110\uff99\114\uff99\116\uff99\127" +
    "\uff99\001\002\000\042\012\uff9a\061\uff9a\064\uff9a\067\uff9a" +
    "\071\uff9a\072\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101" +
    "\uff9a\107\uff9a\110\uff9a\114\uff9a\116\uff9a\127\uff9a\001\002" +
    "\000\030\013\160\043\200\050\203\051\177\052\165\072" +
    "\172\142\163\143\171\154\167\155\201\157\166\001\002" +
    "\000\012\064\uff9d\071\206\072\207\114\214\001\002\000" +
    "\042\012\uff96\061\uff96\064\uff96\067\uff96\071\uff96\072\uff96" +
    "\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\107\uff96\110" +
    "\uff96\114\uff96\116\uff96\127\uff96\001\002\000\030\013\160" +
    "\043\200\050\203\051\177\052\165\072\172\142\163\143" +
    "\171\154\167\155\201\157\166\001\002\000\006\064\217" +
    "\114\220\001\002\000\030\013\160\043\200\050\203\051" +
    "\177\052\165\072\172\142\163\143\171\154\167\155\201" +
    "\157\166\001\002\000\042\012\uff97\061\uff97\064\uff97\067" +
    "\uff97\071\uff97\072\uff97\075\uff97\076\uff97\077\uff97\100\uff97" +
    "\101\uff97\107\uff97\110\uff97\114\uff97\116\uff97\127\uff97\001" +
    "\002\000\012\064\uff9d\071\206\072\207\114\uff9d\001\002" +
    "\000\004\050\242\001\002\000\006\064\225\067\226\001" +
    "\002\000\012\010\uffb2\012\uffb2\064\uffb2\067\uffb2\001\002" +
    "\000\004\051\222\001\002\000\036\013\160\043\200\050" +
    "\174\051\177\052\165\072\172\102\162\113\164\127\176" +
    "\142\163\143\171\154\167\155\201\157\166\001\002\000" +
    "\010\107\231\110\230\127\232\001\002\000\036\013\160" +
    "\043\200\050\174\051\177\052\165\072\172\102\162\113" +
    "\164\127\176\142\163\143\171\154\167\155\201\157\166" +
    "\001\002\000\036\013\160\043\200\050\174\051\177\052" +
    "\165\072\172\102\162\113\164\127\176\142\163\143\171" +
    "\154\167\155\201\157\166\001\002\000\006\100\233\101" +
    "\234\001\002\000\030\013\160\043\200\050\203\051\177" +
    "\052\165\072\172\142\163\143\171\154\167\155\201\157" +
    "\166\001\002\000\030\013\160\043\200\050\203\051\177" +
    "\052\165\072\172\142\163\143\171\154\167\155\201\157" +
    "\166\001\002\000\026\012\uffa9\061\uffa9\067\uffa9\071\206" +
    "\072\207\107\uffa9\110\uffa9\114\uffa9\116\uffa9\127\uffa9\001" +
    "\002\000\026\012\uffa8\061\uffa8\067\uffa8\071\206\072\207" +
    "\107\uffa8\110\uffa8\114\uffa8\116\uffa8\127\uffa8\001\002\000" +
    "\022\012\uffab\061\uffab\067\uffab\107\uffab\110\uffab\114\uffab" +
    "\116\uffab\127\uffab\001\002\000\022\012\uffaa\061\uffaa\067" +
    "\uffaa\107\231\110\uffaa\114\uffaa\116\uffaa\127\uffaa\001\002" +
    "\000\012\010\uffb3\012\uffb3\064\uffb3\067\uffb3\001\002\000" +
    "\012\010\uffb4\012\uffb4\064\uffb4\067\uffb4\001\002\000\012" +
    "\010\246\012\244\064\225\067\245\001\002\000\004\115" +
    "\261\001\002\000\036\013\160\043\200\050\174\051\177" +
    "\052\165\072\172\102\162\113\164\127\176\142\163\143" +
    "\171\154\167\155\201\157\166\001\002\000\036\013\160" +
    "\043\200\050\174\051\177\052\165\072\172\102\162\113" +
    "\164\127\176\142\163\143\171\154\167\155\201\157\166" +
    "\001\002\000\012\012\250\067\251\107\231\110\230\001" +
    "\002\000\004\115\253\001\002\000\036\013\160\043\200" +
    "\050\174\051\177\052\165\072\172\102\162\113\164\127" +
    "\176\142\163\143\171\154\167\155\201\157\166\001\002" +
    "\000\010\061\uffaf\107\231\110\230\001\002\000\036\013" +
    "\160\043\200\050\174\051\177\052\165\072\172\102\162" +
    "\113\164\127\176\142\163\143\171\154\167\155\201\157" +
    "\166\001\002\000\010\107\231\110\230\116\255\001\002" +
    "\000\004\073\256\001\002\000\030\013\160\043\200\050" +
    "\203\051\177\052\165\072\172\142\163\143\171\154\167" +
    "\155\201\157\166\001\002\000\010\061\uffb1\071\206\072" +
    "\207\001\002\000\010\061\uffae\107\231\110\230\001\002" +
    "\000\036\013\160\043\200\050\174\051\177\052\165\072" +
    "\172\102\162\113\164\127\176\142\163\143\171\154\167" +
    "\155\201\157\166\001\002\000\010\107\231\110\230\116" +
    "\263\001\002\000\004\073\264\001\002\000\030\013\160" +
    "\043\200\050\203\051\177\052\165\072\172\142\163\143" +
    "\171\154\167\155\201\157\166\001\002\000\010\061\uffb0" +
    "\071\206\072\207\001\002\000\022\012\uffa7\061\uffa7\067" +
    "\uffa7\107\uffa7\110\uffa7\114\uffa7\116\uffa7\127\uffa7\001\002" +
    "\000\030\013\160\043\200\050\203\051\177\052\165\072" +
    "\172\142\163\143\171\154\167\155\201\157\166\001\002" +
    "\000\006\064\217\114\271\001\002\000\040\012\uffac\061" +
    "\uffac\067\uffac\071\uff97\072\uff97\075\uff97\076\uff97\077\uff97" +
    "\100\uff97\101\uff97\107\uffac\110\uffac\114\uffac\116\uffac\127" +
    "\uffac\001\002\000\042\012\uff8c\061\uff8c\064\uff8c\067\uff8c" +
    "\071\uff8c\072\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101" +
    "\uff8c\107\uff8c\110\uff8c\114\uff8c\116\uff8c\127\uff8c\001\002" +
    "\000\042\012\uff8e\061\uff8e\064\uff8e\067\uff8e\071\uff8e\072" +
    "\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\107\uff8e" +
    "\110\uff8e\114\uff8e\116\uff8e\127\uff8e\001\002\000\042\012" +
    "\uff90\061\uff90\064\uff90\067\uff90\071\uff90\072\uff90\075\uff90" +
    "\076\uff90\077\uff90\100\uff90\101\uff90\107\uff90\110\uff90\114" +
    "\uff90\116\uff90\127\uff90\001\002\000\030\013\160\043\200" +
    "\050\203\051\177\052\165\072\172\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\030\013\160\043\200" +
    "\050\203\051\177\052\165\072\172\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\030\013\160\043\200" +
    "\050\203\051\177\052\165\072\172\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\030\013\160\043\200" +
    "\050\203\051\177\052\165\072\172\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\030\013\160\043\200" +
    "\050\203\051\177\052\165\072\172\142\163\143\171\154" +
    "\167\155\201\157\166\001\002\000\026\012\uffa6\061\uffa6" +
    "\067\uffa6\071\206\072\207\107\uffa6\110\uffa6\114\uffa6\116" +
    "\uffa6\127\uffa6\001\002\000\026\012\uffa4\061\uffa4\067\uffa4" +
    "\071\206\072\207\107\uffa4\110\uffa4\114\uffa4\116\uffa4\127" +
    "\uffa4\001\002\000\026\012\uffa2\061\uffa2\067\uffa2\071\206" +
    "\072\207\107\uffa2\110\uffa2\114\uffa2\116\uffa2\127\uffa2\001" +
    "\002\000\026\012\uffa5\061\uffa5\067\uffa5\071\206\072\207" +
    "\107\uffa5\110\uffa5\114\uffa5\116\uffa5\127\uffa5\001\002\000" +
    "\026\012\uffa3\061\uffa3\067\uffa3\071\206\072\207\107\uffa3" +
    "\110\uffa3\114\uffa3\116\uffa3\127\uffa3\001\002\000\010\107" +
    "\231\110\230\114\310\001\002\000\022\012\uffa0\061\uffa0" +
    "\067\uffa0\107\uffa0\110\uffa0\114\uffa0\116\uffa0\127\uffa0\001" +
    "\002\000\022\012\uffa1\061\uffa1\067\uffa1\107\231\110\230" +
    "\114\uffa1\116\uffa1\127\uffa1\001\002\000\004\065\313\001" +
    "\002\000\012\142\315\143\317\154\316\157\314\001\002" +
    "\000\004\061\uffd0\001\002\000\004\061\uffd2\001\002\000" +
    "\004\061\uffd3\001\002\000\004\061\uffd1\001\002\000\004" +
    "\061\uffd6\001\002\000\004\154\322\001\002\000\004\061" +
    "\uffd5\001\002\000\004\067\324\001\002\000\010\026\327" +
    "\051\177\157\166\001\002\000\006\061\uffc5\064\uffc5\001" +
    "\002\000\006\061\uffcd\064\331\001\002\000\006\051\177" +
    "\157\166\001\002\000\006\061\uffcc\064\331\001\002\000" +
    "\006\051\177\157\166\001\002\000\006\061\uffc6\064\uffc6" +
    "\001\002\000\004\157\334\001\002\000\004\061\uffef\001" +
    "\002\000\064\002\000\004\023\005\034\006\042\014\004" +
    "\015\035\021\033\022\037\023\017\024\006\027\025\030" +
    "\030\032\014\033\016\034\022\035\012\041\027\042\013" +
    "\044\032\045\010\046\011\047\041\053\005\056\036\057" +
    "\031\001\002\000\004\061\ufffe\001\002\000\004\154\344" +
    "\001\002\000\006\011\341\061\uffd7\001\002\000\004\154" +
    "\342\001\002\000\004\040\343\001\002\000\004\061\uffd8" +
    "\001\002\000\004\040\345\001\002\000\004\061\uffd9\001" +
    "\002\000\004\157\347\001\002\000\004\061\ufff0\001\002" +
    "\000\004\061\uffcf\001\002\000\004\061\uffce\001\002\000" +
    "\004\050\353\001\002\000\006\061\uffe7\157\354\001\002" +
    "\000\004\061\uffe8\001\002\000\004\025\372\001\002\000" +
    "\006\025\357\113\360\001\002\000\004\050\370\001\002" +
    "\000\004\154\361\001\002\000\004\072\362\001\002\000" +
    "\004\154\363\001\002\000\004\114\364\001\002\000\004" +
    "\025\365\001\002\000\004\050\366\001\002\000\006\061" +
    "\uffe2\157\367\001\002\000\004\061\uffe3\001\002\000\006" +
    "\061\uffe4\157\371\001\002\000\004\061\uffe5\001\002\000" +
    "\004\050\373\001\002\000\004\157\374\001\002\000\004" +
    "\061\uffe6\001\002\000\004\157\u0101\001\002\000\004\050" +
    "\377\001\002\000\004\157\u0100\001\002\000\004\061\uffe1" +
    "\001\002\000\004\061\uffe0\001\002\000\004\061\ufff7\001" +
    "\002\000\004\061\ufff3\001\002\000\004\061\ufff4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\020\002\037\003\017\023\025\025\006\026" +
    "\023\027\014\030\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\127\001" +
    "\001\000\004\012\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\120\001\001\000\002\001\001\000" +
    "\004\012\122\001\001\000\002\001\001\000\004\012\124" +
    "\001\001\000\002\001\001\000\004\012\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\154\001\001\000\002" +
    "\001\001\000\012\015\160\016\167\017\172\021\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\160\016\167\017\172\021\310\001\001\000" +
    "\002\001\001\000\012\015\160\016\167\017\172\021\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\242\011" +
    "\223\001\001\000\006\007\222\011\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\203\015\160\016\204\017\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\160\016" +
    "\210\017\172\001\001\000\010\015\160\016\207\017\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\160\016\212\017\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\215\015\160\016\204\017\172\001" +
    "\001\000\002\001\001\000\010\015\160\016\220\017\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\240" +
    "\001\001\000\012\015\160\016\167\017\172\021\226\001" +
    "\001\000\002\001\001\000\012\015\160\016\167\017\172" +
    "\021\237\001\001\000\012\015\160\016\167\017\172\021" +
    "\236\001\001\000\002\001\001\000\010\015\160\016\235" +
    "\017\172\001\001\000\010\015\160\016\234\017\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\160\016\167" +
    "\017\172\021\257\001\001\000\012\015\160\016\167\017" +
    "\172\021\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\160\016\167\017\172\021\251\001\001\000" +
    "\002\001\001\000\012\015\160\016\167\017\172\021\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\160\016\256\017\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\160\016\167\017\172\021\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\160" +
    "\016\264\017\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\267\015\160\016\204\017\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\160\016\305" +
    "\017\172\001\001\000\010\015\160\016\304\017\172\001" +
    "\001\000\010\015\160\016\303\017\172\001\001\000\010" +
    "\015\160\016\302\017\172\001\001\000\010\015\160\016" +
    "\301\017\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\325\017\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\327\017\324\001\001\000\002\001" +
    "\001\000\004\017\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\025\025\335\026" +
    "\023\027\014\030\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol cur_token){
    throw new PMLParseException("Syntax error", cur_token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PMLParser$actions {
  private final PMLParser parser;

  /** Constructor */
  CUP$PMLParser$actions(PMLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PMLParser$do_action(
    int                        CUP$PMLParser$act_num,
    java_cup.runtime.lr_parser CUP$PMLParser$parser,
    java.util.Stack            CUP$PMLParser$stack,
    int                        CUP$PMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PMLParser$result;

      /* select the action based on the action number */
      switch (CUP$PMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // namedconstant ::= UPPERCASEID 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",13, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // namedconstant ::= STRING 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",13, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // constant ::= MINUS INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.NEGATIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // constant ::= INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.POSITIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constant ::= MINUS DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(-Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constant ::= DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // constant ::= MINUS NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(-Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // constant ::= FALSE 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserBoolConstant(false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constant ::= TRUE 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserBoolConstant(true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // constant ::= NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // constant ::= LOWERCASEID 
            {
              ParserTerm RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserVariable(v); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constant ::= namedconstant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term ::= BINS LPAREN arguments COMMA term RPAREN 
            {
              ParserTerm RESULT =null;
		int binsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int binsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<ParserTerm> bins = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		ParserTerm arg = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserBins(bins, arg); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserTerm RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserFunctionApplication(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // term ::= UNDERSCORE 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDontCare(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= term MINUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserMinus(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= term PLUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAdd(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= constant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // arguments ::= term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTerm> l = new LinkedList<ParserTerm>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arguments ::= arguments COMMA term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTerm> l = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conjunction ::= formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserFormula> l = new LinkedList<ParserFormula>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conjunction ::= conjunction AND formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserFormula> l = (LinkedList<ParserFormula>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // formula ::= LPAREN formula RPAREN 
            {
              ParserFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = f; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // formula ::= EXCL formula 
            {
              ParserFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNot(f); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // formula ::= term NOTEQUALS term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.NEQ, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // formula ::= term GEQ term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.GEQ, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // formula ::= term LEQ term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.LEQ, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // formula ::= term GREATER term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.GT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // formula ::= term LESSTHAN term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.LT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // formula ::= LOWERCASEID ACYCLIC 
            {
              ParserFormula RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String pred = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAcyclicityConstraint(pred); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // formula ::= BAR quantification COLON formula BAR GEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm lb = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(lb, q, f, new ParserIntConstant(Integer.MAX_VALUE)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // formula ::= BAR quantification COLON formula BAR LEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm ub = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(new ParserIntConstant(Integer.MIN_VALUE),q,f,ub); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // formula ::= formula IMPLIES formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImplies(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // formula ::= formula AND formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserConjunction(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // formula ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserFormula RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAtom(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= FACTOR COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(null,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= FACTOR COLON FOR quantification COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= FACTOR COLON FOR quantification IF formula COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= FACTOR COLON FOR quantification ADD LSQPAREN formula RSQPAREN TIMES term 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm w = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,null,f,w); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= FACTOR COLON FOR quantification IF formula ADD LSQPAREN formula RSQPAREN TIMES term 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm w = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,w); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-11)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // quantification ::= typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTyping> l = new LinkedList<ParserTyping>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // quantification ::= quantification COMMA typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> l = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // typing ::= UPPERCASEID LOWERCASEID 
            {
              ParserTyping RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTyping(type,var); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("typing",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lowercasecommalist ::= LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lowercasecommalist ::= lowercasecommalist COMMA LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // name ::= SCORES DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("scores",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // name ::= SCORES 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("scores",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // name ::= WEIGHTS DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("weights",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // name ::= WEIGHTS 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("weights",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // name ::= ATOMS DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("atoms",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // name ::= ATOMS 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("atoms",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // name ::= LOWERCASEID DOT name 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // name ::= LOWERCASEID 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // markers ::= UNDERSCORE 
            {
              LinkedList<Boolean> RESULT =null;
		 LinkedList<Boolean> l = new LinkedList<Boolean>();
       l.add(false);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("markers",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // markers ::= TIMES 
            {
              LinkedList<Boolean> RESULT =null;
		 LinkedList<Boolean> l = new LinkedList<Boolean>();
       l.add(true);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("markers",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // markers ::= markers COMMA UNDERSCORE 
            {
              LinkedList<Boolean> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<Boolean> l = (LinkedList<Boolean>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 l.add(false);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("markers",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // markers ::= markers COMMA TIMES 
            {
              LinkedList<Boolean> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<Boolean> l = (LinkedList<Boolean>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 l.add(true);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("markers",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // argtypes ::= UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // argtypes ::= argtypes X UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // namedconstantlist ::= namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserNamedConstant> l = new LinkedList<ParserNamedConstant>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // namedconstantlist ::= namedconstantlist COMMA namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID MINUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"-"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",22, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID PLUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"+"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",22, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",22, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes LPAREN SEQ COLON NUMBER RPAREN 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer seq = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreatePredicate(id,l,Integer.valueOf(seq)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreatePredicate(id,l,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // createType ::= TYPE UPPERCASEID COLON ELLIPSIS namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,true,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // createType ::= TYPE UPPERCASEID COLON namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,false,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= CLEAR SCORES 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("scores"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= CLEAR ATOMS 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("atoms"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= SET name ASSIGN STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSet(n, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= SET name ASSIGN FALSE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= SET name ASSIGN TRUE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= SET name ASSIGN NUMBER 
            {
              ParserStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName p = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSet(p, Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= JUMP 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserShift(1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= JUMP MINUS NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserShift(-Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= JUMP NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserShift(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= LEARN NUMBER 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= LEARN NUMBER FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),Integer.valueOf(e)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= LEARN FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(-1,Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= LEARN 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserLearn(-1,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= COLLECT 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserCollect(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= GREEDY 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserGreedy(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= SOLVE 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserSolve(100); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= SOLVE NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSolve(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= ATOMS LOWERCASEID FROM STRING 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(null,null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= TYPES TO STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveTypes(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= TYPES FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserGenerateTypes(g, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= SAVE CORPUS LPAREN NUMBER MINUS NUMBER RPAREN TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(factory, null,Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= SAVE CORPUS LPAREN NUMBER MINUS NUMBER RPAREN TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(factory, s.substring(1,s.length()-1),Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= SAVE CORPUS TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(f, null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= SAVE CORPUS TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= SAVE name TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSave(n, f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= TEST TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTest(f, null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= TEST TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTest(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= LOAD CORPUS FROM LOWERCASEID STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(factory, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= LOAD CORPUS FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= LOAD CORPUS FROM STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= LOAD CORPUS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= LOAD name FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(n, m, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= LOAD name FROM STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(n, null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= WEIGHTS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadWeights(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= SCORES FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadScores(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= ATOMS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(null, null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PRINT name 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserPrint(n); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= INSPECT UPPERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= INSPECT LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= OBSERVED COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.OBSERVED,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= HIDDEN COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.HIDDEN,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= INCLUDE STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImport(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= INDEX COLON LOWERCASEID LPAREN markers RPAREN 
            {
              ParserStatement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String pred = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<Boolean> m = (LinkedList<Boolean>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateIndex(pred,m); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= factor 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFactorFormula f = (ParserFactorFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= createWeightFunction 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateWeightFunction s = (ParserCreateWeightFunction)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= createPredicate 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreatePredicate s = (ParserCreatePredicate)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= createType 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateType s = (ParserCreateType)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserStatement> statements = new LinkedList<ParserStatement>();
               statements.add(stmt);
               RESULT = statements; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program SEMI statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserStatement> program = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 program.add(stmt);
               RESULT = program; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              LinkedList<ParserStatement> RESULT =null;
		 RESULT = new LinkedList<ParserStatement>(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= program SEMI 
            {
              LinkedList<ParserStatement> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> p = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = p; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> start_val = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		RESULT = start_val;
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PMLParser$parser.done_parsing();
          return CUP$PMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

