
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 03 20:32:37 GMT 2007
//----------------------------------------------------

package thebeast.pml.parser;

import java.util.LinkedList;
import java_cup.runtime.*;
import thebeast.pml.*;
import thebeast.pml.formula.*;
import thebeast.pml.term.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 03 20:32:37 GMT 2007
  */
public class PMLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PMLParser() {super();}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\024\005\000\002\024\005\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\006" +
    "\000\002\024\007\000\002\024\006\000\002\024\013\000" +
    "\002\024\007\000\002\024\014\000\002\024\006\000\002" +
    "\024\007\000\002\024\007\000\002\024\006\000\002\024" +
    "\014\000\002\024\013\000\002\024\006\000\002\024\005" +
    "\000\002\024\006\000\002\024\004\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\006\000\002\024\007\000\002\024\004\000\002\024" +
    "\004\000\002\024\005\000\002\024\003\000\002\024\006" +
    "\000\002\024\006\000\002\024\006\000\002\024\006\000" +
    "\002\024\004\000\002\024\004\000\002\025\006\000\002" +
    "\025\007\000\002\026\006\000\002\026\013\000\002\027" +
    "\010\000\002\027\011\000\002\027\011\000\002\005\005" +
    "\000\002\005\003\000\002\012\005\000\002\012\003\000" +
    "\002\011\003\000\002\011\005\000\002\011\003\000\002" +
    "\011\005\000\002\011\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\005\000\002\013\005\000\002\013\003" +
    "\000\002\010\004\000\002\007\005\000\002\007\003\000" +
    "\002\022\016\000\002\022\012\000\002\022\010\000\002" +
    "\022\005\000\002\020\006\000\002\020\005\000\002\020" +
    "\005\000\002\020\011\000\002\020\011\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\021\005\000\002\021\003\000\002\006\005\000\002" +
    "\006\003\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\015\006\000\002\015\010" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\004\000\002\014\003\000\002\014\004\000\002" +
    "\014\003\000\002\014\004\000\002\016\003\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\062\002\uffff\004\023\005\034\006\041\014" +
    "\004\015\035\021\033\022\037\023\017\024\006\027\025" +
    "\030\030\032\014\033\016\034\022\035\011\041\027\042" +
    "\013\044\032\045\010\046\012\052\005\055\036\056\031" +
    "\001\002\000\006\047\350\050\347\001\002\000\004\156" +
    "\346\001\002\000\006\020\342\025\341\001\002\000\004" +
    "\060\ufffd\001\002\000\014\015\101\017\322\032\103\034" +
    "\100\047\104\001\002\000\004\060\uffdd\001\002\000\004" +
    "\025\316\001\002\000\006\015\314\032\315\001\002\000" +
    "\004\020\312\001\002\000\004\060\ufffb\001\002\000\004" +
    "\060\uffde\001\002\000\010\011\303\060\uffdc\153\304\001" +
    "\002\000\004\060\301\001\002\000\004\060\ufffa\001\002" +
    "\000\004\020\277\001\002\000\004\050\267\001\002\000" +
    "\004\060\ufffc\001\002\000\010\060\uffd6\071\265\153\264" +
    "\001\002\000\004\060\ufff9\001\002\000\012\015\101\032" +
    "\103\034\100\047\104\001\002\000\004\066\143\001\002" +
    "\000\004\066\141\001\002\000\014\015\101\017\116\032" +
    "\103\034\100\047\104\001\002\000\012\015\101\032\103" +
    "\034\100\047\104\001\002\000\004\047\070\001\002\000" +
    "\006\020\063\047\064\001\002\000\004\066\056\001\002" +
    "\000\006\060\uffdf\153\055\001\002\000\004\002\054\001" +
    "\002\000\004\047\042\001\002\000\004\066\043\001\002" +
    "\000\004\050\044\001\002\000\012\007\uffc5\060\uffc5\112" +
    "\uffc5\127\uffc5\001\002\000\006\007\047\127\046\001\002" +
    "\000\004\050\051\001\002\000\004\050\050\001\002\000" +
    "\012\007\uffc6\060\uffc6\112\uffc6\127\uffc6\001\002\000\010" +
    "\060\uffcb\070\052\071\053\001\002\000\004\060\uffca\001" +
    "\002\000\004\060\uffc9\001\002\000\004\002\001\001\002" +
    "\000\004\060\uffe0\001\002\000\004\047\060\001\002\000" +
    "\006\060\ufff7\063\061\001\002\000\006\060\uffbb\063\uffbb" +
    "\001\002\000\004\047\062\001\002\000\006\060\uffbc\063" +
    "\uffbc\001\002\000\004\156\067\001\002\000\004\020\065" +
    "\001\002\000\004\156\066\001\002\000\004\060\uffe1\001" +
    "\002\000\004\060\ufff2\001\002\000\004\066\071\001\002" +
    "\000\004\050\044\001\002\000\010\007\047\060\uffcd\112" +
    "\073\001\002\000\004\037\074\001\002\000\004\066\075" +
    "\001\002\000\004\153\076\001\002\000\004\113\077\001" +
    "\002\000\004\060\uffcc\001\002\000\014\020\uffc0\025\uffc0" +
    "\060\uffc0\064\uffc0\067\113\001\002\000\014\020\uffc2\025" +
    "\uffc2\060\uffc2\064\uffc2\067\111\001\002\000\004\060\ufff3" +
    "\001\002\000\014\020\uffbe\025\uffbe\060\uffbe\064\uffbe\067" +
    "\107\001\002\000\014\020\uffc4\025\uffc4\060\uffc4\064\uffc4" +
    "\067\105\001\002\000\012\015\101\032\103\034\100\047" +
    "\104\001\002\000\012\020\uffc3\025\uffc3\060\uffc3\064\uffc3" +
    "\001\002\000\012\015\101\032\103\034\100\047\104\001" +
    "\002\000\012\020\uffbd\025\uffbd\060\uffbd\064\uffbd\001\002" +
    "\000\012\015\101\032\103\034\100\047\104\001\002\000" +
    "\012\020\uffc1\025\uffc1\060\uffc1\064\uffc1\001\002\000\012" +
    "\015\101\032\103\034\100\047\104\001\002\000\012\020" +
    "\uffbf\025\uffbf\060\uffbf\064\uffbf\001\002\000\004\020\135" +
    "\001\002\000\004\020\117\001\002\000\006\047\121\156" +
    "\120\001\002\000\006\060\uffed\112\130\001\002\000\004" +
    "\156\122\001\002\000\006\060\uffeb\112\123\001\002\000" +
    "\004\153\124\001\002\000\004\071\125\001\002\000\004" +
    "\153\126\001\002\000\004\113\127\001\002\000\004\060" +
    "\uffea\001\002\000\004\153\131\001\002\000\004\071\132" +
    "\001\002\000\004\153\133\001\002\000\004\113\134\001" +
    "\002\000\004\060\uffec\001\002\000\006\047\137\156\136" +
    "\001\002\000\004\060\uffef\001\002\000\004\156\140\001" +
    "\002\000\004\060\uffee\001\002\000\004\047\060\001\002" +
    "\000\006\060\ufff6\063\061\001\002\000\030\011\146\013" +
    "\162\043\161\047\145\050\150\051\160\071\144\126\147" +
    "\153\151\154\155\156\154\001\002\000\010\051\254\153" +
    "\255\154\253\001\002\000\020\031\247\070\uff9f\071\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\112\250\001\002\000\004\050" +
    "\215\001\002\000\004\050\215\001\002\000\036\012\uff97" +
    "\060\uff97\063\uff97\066\uff97\070\uff97\071\uff97\074\uff97\075" +
    "\uff97\076\uff97\106\uff97\107\uff97\113\uff97\115\uff97\126\uff97" +
    "\001\002\000\036\012\uff9e\060\uff9e\063\uff9e\066\uff9e\070" +
    "\uff9e\071\uff9e\074\uff9e\075\uff9e\076\uff9e\106\uff9e\107\uff9e" +
    "\113\uff9e\115\uff9e\126\uff9e\001\002\000\014\070\167\071" +
    "\170\074\210\075\211\076\207\001\002\000\036\012\uffa0" +
    "\060\uffa0\063\uffa0\066\uffa0\070\uffa0\071\uffa0\074\uffa0\075" +
    "\uffa0\076\uffa0\106\uffa0\107\uffa0\113\uffa0\115\uffa0\126\uffa0" +
    "\001\002\000\036\012\uff98\060\uff98\063\uff98\066\uff98\070" +
    "\uff98\071\uff98\074\uff98\075\uff98\076\uff98\106\uff98\107\uff98" +
    "\113\uff98\115\uff98\126\uff98\001\002\000\036\012\uff9c\060" +
    "\uff9c\063\uff9c\066\uff9c\070\uff9c\071\uff9c\074\uff9c\075\uff9c" +
    "\076\uff9c\106\uff9c\107\uff9c\113\uff9c\115\uff9c\126\uff9c\001" +
    "\002\000\036\012\uffa6\060\uffa6\063\uffa6\066\uffa6\070\uffa6" +
    "\071\uffa6\074\uffa6\075\uffa6\076\uffa6\106\uffa6\107\uffa6\113" +
    "\uffa6\115\uffa6\126\uffa6\001\002\000\010\060\uffb4\106\204" +
    "\107\203\001\002\000\036\012\uff9a\060\uff9a\063\uff9a\066" +
    "\uff9a\070\uff9a\071\uff9a\074\uff9a\075\uff9a\076\uff9a\106\uff9a" +
    "\107\uff9a\113\uff9a\115\uff9a\126\uff9a\001\002\000\004\112" +
    "\163\001\002\000\036\012\uffa3\060\uffa3\063\uffa3\066\uffa3" +
    "\070\uffa3\071\uffa3\074\uffa3\075\uffa3\076\uffa3\106\uffa3\107" +
    "\uffa3\113\uffa3\115\uffa3\126\uffa3\001\002\000\024\013\162" +
    "\043\161\047\164\050\150\051\160\071\144\153\151\154" +
    "\155\156\154\001\002\000\040\012\uff9f\060\uff9f\063\uff9f" +
    "\066\uff9f\070\uff9f\071\uff9f\074\uff9f\075\uff9f\076\uff9f\106" +
    "\uff9f\107\uff9f\112\176\113\uff9f\115\uff9f\126\uff9f\001\002" +
    "\000\004\063\173\001\002\000\012\063\uffa7\070\167\071" +
    "\170\113\uffa7\001\002\000\024\013\162\043\161\047\164" +
    "\050\150\051\160\071\144\153\151\154\155\156\154\001" +
    "\002\000\024\013\162\043\161\047\164\050\150\051\160" +
    "\071\144\153\151\154\155\156\154\001\002\000\036\012" +
    "\uffa4\060\uffa4\063\uffa4\066\uffa4\070\uffa4\071\uffa4\074\uffa4" +
    "\075\uffa4\076\uffa4\106\uffa4\107\uffa4\113\uffa4\115\uffa4\126" +
    "\uffa4\001\002\000\036\012\uffa5\060\uffa5\063\uffa5\066\uffa5" +
    "\070\uffa5\071\uffa5\074\uffa5\075\uffa5\076\uffa5\106\uffa5\107" +
    "\uffa5\113\uffa5\115\uffa5\126\uffa5\001\002\000\024\013\162" +
    "\043\161\047\164\050\150\051\160\071\144\153\151\154" +
    "\155\156\154\001\002\000\012\063\uffa8\070\167\071\170" +
    "\113\175\001\002\000\036\012\uffa1\060\uffa1\063\uffa1\066" +
    "\uffa1\070\uffa1\071\uffa1\074\uffa1\075\uffa1\076\uffa1\106\uffa1" +
    "\107\uffa1\113\uffa1\115\uffa1\126\uffa1\001\002\000\024\013" +
    "\162\043\161\047\164\050\150\051\160\071\144\153\151" +
    "\154\155\156\154\001\002\000\006\063\200\113\201\001" +
    "\002\000\024\013\162\043\161\047\164\050\150\051\160" +
    "\071\144\153\151\154\155\156\154\001\002\000\036\012" +
    "\uffa2\060\uffa2\063\uffa2\066\uffa2\070\uffa2\071\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\106\uffa2\107\uffa2\113\uffa2\115\uffa2\126" +
    "\uffa2\001\002\000\012\063\uffa8\070\167\071\170\113\uffa8" +
    "\001\002\000\026\013\162\043\161\047\145\050\150\051" +
    "\160\071\144\126\147\153\151\154\155\156\154\001\002" +
    "\000\026\013\162\043\161\047\145\050\150\051\160\071" +
    "\144\126\147\153\151\154\155\156\154\001\002\000\020" +
    "\012\uffb2\060\uffb2\066\uffb2\106\uffb2\107\uffb2\115\uffb2\126" +
    "\uffb2\001\002\000\020\012\uffb1\060\uffb1\066\uffb1\106\204" +
    "\107\uffb1\115\uffb1\126\uffb1\001\002\000\024\013\162\043" +
    "\161\047\164\050\150\051\160\071\144\153\151\154\155" +
    "\156\154\001\002\000\024\013\162\043\161\047\164\050" +
    "\150\051\160\071\144\153\151\154\155\156\154\001\002" +
    "\000\024\013\162\043\161\047\164\050\150\051\160\071" +
    "\144\153\151\154\155\156\154\001\002\000\024\012\uffad" +
    "\060\uffad\066\uffad\070\167\071\170\106\uffad\107\uffad\115" +
    "\uffad\126\uffad\001\002\000\024\012\uffab\060\uffab\066\uffab" +
    "\070\167\071\170\106\uffab\107\uffab\115\uffab\126\uffab\001" +
    "\002\000\024\012\uffac\060\uffac\066\uffac\070\167\071\170" +
    "\106\uffac\107\uffac\115\uffac\126\uffac\001\002\000\004\047" +
    "\231\001\002\000\006\063\220\066\221\001\002\000\010" +
    "\010\uffb8\063\uffb8\066\uffb8\001\002\000\004\050\215\001" +
    "\002\000\026\013\162\043\161\047\145\050\150\051\160" +
    "\071\144\126\147\153\151\154\155\156\154\001\002\000" +
    "\010\106\204\107\203\126\223\001\002\000\006\077\224" +
    "\100\225\001\002\000\024\013\162\043\161\047\164\050" +
    "\150\051\160\071\144\153\151\154\155\156\154\001\002" +
    "\000\024\013\162\043\161\047\164\050\150\051\160\071" +
    "\144\153\151\154\155\156\154\001\002\000\024\012\uffb0" +
    "\060\uffb0\066\uffb0\070\167\071\170\106\uffb0\107\uffb0\115" +
    "\uffb0\126\uffb0\001\002\000\024\012\uffaf\060\uffaf\066\uffaf" +
    "\070\167\071\170\106\uffaf\107\uffaf\115\uffaf\126\uffaf\001" +
    "\002\000\010\010\uffb9\063\uffb9\066\uffb9\001\002\000\010" +
    "\010\uffba\063\uffba\066\uffba\001\002\000\010\010\234\063" +
    "\220\066\233\001\002\000\026\013\162\043\161\047\145" +
    "\050\150\051\160\071\144\126\147\153\151\154\155\156" +
    "\154\001\002\000\026\013\162\043\161\047\145\050\150" +
    "\051\160\071\144\126\147\153\151\154\155\156\154\001" +
    "\002\000\012\012\236\066\237\106\204\107\203\001\002" +
    "\000\004\114\241\001\002\000\026\013\162\043\161\047" +
    "\145\050\150\051\160\071\144\126\147\153\151\154\155" +
    "\156\154\001\002\000\010\060\uffb6\106\204\107\203\001" +
    "\002\000\026\013\162\043\161\047\145\050\150\051\160" +
    "\071\144\126\147\153\151\154\155\156\154\001\002\000" +
    "\010\106\204\107\203\115\243\001\002\000\004\072\244" +
    "\001\002\000\024\013\162\043\161\047\164\050\150\051" +
    "\160\071\144\153\151\154\155\156\154\001\002\000\010" +
    "\060\uffb7\070\167\071\170\001\002\000\010\060\uffb5\106" +
    "\204\107\203\001\002\000\020\012\uffae\060\uffae\066\uffae" +
    "\106\uffae\107\uffae\115\uffae\126\uffae\001\002\000\024\013" +
    "\162\043\161\047\164\050\150\051\160\071\144\153\151" +
    "\154\155\156\154\001\002\000\006\063\200\113\252\001" +
    "\002\000\032\012\uffb3\060\uffb3\066\uffb3\070\uffa2\071\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\106\uffb3\107\uffb3\115\uffb3\126" +
    "\uffb3\001\002\000\036\012\uff9b\060\uff9b\063\uff9b\066\uff9b" +
    "\070\uff9b\071\uff9b\074\uff9b\075\uff9b\076\uff9b\106\uff9b\107" +
    "\uff9b\113\uff9b\115\uff9b\126\uff9b\001\002\000\036\012\uff99" +
    "\060\uff99\063\uff99\066\uff99\070\uff99\071\uff99\074\uff99\075" +
    "\uff99\076\uff99\106\uff99\107\uff99\113\uff99\115\uff99\126\uff99" +
    "\001\002\000\036\012\uff9d\060\uff9d\063\uff9d\066\uff9d\070" +
    "\uff9d\071\uff9d\074\uff9d\075\uff9d\076\uff9d\106\uff9d\107\uff9d" +
    "\113\uff9d\115\uff9d\126\uff9d\001\002\000\004\064\257\001" +
    "\002\000\012\141\261\142\263\153\262\156\260\001\002" +
    "\000\004\060\uffd2\001\002\000\004\060\uffd4\001\002\000" +
    "\004\060\uffd5\001\002\000\004\060\uffd3\001\002\000\004" +
    "\060\uffd8\001\002\000\004\153\266\001\002\000\004\060" +
    "\uffd7\001\002\000\004\066\270\001\002\000\010\026\273" +
    "\050\150\156\154\001\002\000\006\060\uffc7\063\uffc7\001" +
    "\002\000\006\060\uffcf\063\275\001\002\000\006\050\150" +
    "\156\154\001\002\000\006\060\uffce\063\275\001\002\000" +
    "\006\050\150\156\154\001\002\000\006\060\uffc8\063\uffc8" +
    "\001\002\000\004\156\300\001\002\000\004\060\ufff0\001" +
    "\002\000\062\002\000\004\023\005\034\006\041\014\004" +
    "\015\035\021\033\022\037\023\017\024\006\027\025\030" +
    "\030\032\014\033\016\034\022\035\011\041\027\042\013" +
    "\044\032\045\010\046\012\052\005\055\036\056\031\001" +
    "\002\000\004\060\ufffe\001\002\000\004\153\310\001\002" +
    "\000\006\011\305\060\uffd9\001\002\000\004\153\306\001" +
    "\002\000\004\040\307\001\002\000\004\060\uffda\001\002" +
    "\000\004\040\311\001\002\000\004\060\uffdb\001\002\000" +
    "\004\156\313\001\002\000\004\060\ufff1\001\002\000\004" +
    "\060\uffd1\001\002\000\004\060\uffd0\001\002\000\004\047" +
    "\317\001\002\000\004\156\320\001\002\000\004\060\uffe9" +
    "\001\002\000\004\025\336\001\002\000\006\025\323\112" +
    "\324\001\002\000\004\047\334\001\002\000\004\153\325" +
    "\001\002\000\004\071\326\001\002\000\004\153\327\001" +
    "\002\000\004\113\330\001\002\000\004\025\331\001\002" +
    "\000\004\047\332\001\002\000\006\060\uffe4\156\333\001" +
    "\002\000\004\060\uffe5\001\002\000\006\060\uffe6\156\335" +
    "\001\002\000\004\060\uffe7\001\002\000\004\047\337\001" +
    "\002\000\004\156\340\001\002\000\004\060\uffe8\001\002" +
    "\000\004\156\345\001\002\000\004\047\343\001\002\000" +
    "\004\156\344\001\002\000\004\060\uffe3\001\002\000\004" +
    "\060\uffe2\001\002\000\004\060\ufff8\001\002\000\004\060" +
    "\ufff4\001\002\000\004\060\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\020\002\037\003\017\022\025\024\006\025" +
    "\023\026\014\027\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\114\001" +
    "\001\000\004\011\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\105\001" +
    "\001\000\002\001\001\000\004\011\107\001\001\000\002" +
    "\001\001\000\004\011\111\001\001\000\002\001\001\000" +
    "\004\011\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\141\001\001\000\002\001\001\000\012\014\155\015" +
    "\151\016\152\020\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\231\010\216\001\001\000\006\007" +
    "\215\010\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\164\014\155\015\165\016\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\155\015" +
    "\171\016\152\001\001\000\010\014\155\015\170\016\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\155\015\173\016\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\176\014\155\015\165\016\152\001" +
    "\001\000\002\001\001\000\010\014\155\015\201\016\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\155\015\151\016\152\020\205\001\001\000\012\014\155" +
    "\015\151\016\152\020\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\155\015\213\016\152\001\001" +
    "\000\010\014\155\015\212\016\152\001\001\000\010\014" +
    "\155\015\211\016\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\227\001\001\000\012" +
    "\014\155\015\151\016\152\020\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\155\015\226\016\152" +
    "\001\001\000\010\014\155\015\225\016\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\155\015\151\016" +
    "\152\020\245\001\001\000\012\014\155\015\151\016\152" +
    "\020\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\155\015\151\016\152\020\237\001\001\000\002" +
    "\001\001\000\012\014\155\015\151\016\152\020\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\155" +
    "\015\244\016\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\250\014\155\015\165" +
    "\016\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\271\016\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\273\016\270\001\001\000\002\001" +
    "\001\000\004\016\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\025\024\301\025" +
    "\023\026\014\027\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol cur_token){
    throw new PMLParseException("Syntax error", cur_token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PMLParser$actions {
  private final PMLParser parser;

  /** Constructor */
  CUP$PMLParser$actions(PMLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PMLParser$do_action(
    int                        CUP$PMLParser$act_num,
    java_cup.runtime.lr_parser CUP$PMLParser$parser,
    java.util.Stack            CUP$PMLParser$stack,
    int                        CUP$PMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PMLParser$result;

      /* select the action based on the action number */
      switch (CUP$PMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // namedconstant ::= UPPERCASEID 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // namedconstant ::= STRING 
            {
              ParserNamedConstant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserNamedConstant(s); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstant",12, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // constant ::= MINUS INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.NEGATIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constant ::= INF 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDoubleConstant(Double.POSITIVE_INFINITY); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // constant ::= MINUS DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(-Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constant ::= DOUBLE 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserDoubleConstant(Double.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // constant ::= MINUS NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(-Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constant ::= NUMBER 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserIntConstant(Integer.valueOf(c)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // constant ::= LOWERCASEID 
            {
              ParserTerm RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserVariable(v); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constant ::= namedconstant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term ::= BINS LPAREN arguments COMMA term RPAREN 
            {
              ParserTerm RESULT =null;
		int binsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int binsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<ParserTerm> bins = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		ParserTerm arg = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserBins(bins, arg); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // term ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserTerm RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserFunctionApplication(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // term ::= UNDERSCORE 
            {
              ParserTerm RESULT =null;
		 RESULT = new ParserDontCare(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // term ::= term MINUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserMinus(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= term PLUS term 
            {
              ParserTerm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm l = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm r = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAdd(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= constant 
            {
              ParserTerm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arguments ::= term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTerm> l = new LinkedList<ParserTerm>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arguments ::= arguments COMMA term 
            {
              LinkedList<ParserTerm> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTerm> l = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm c = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conjunction ::= formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserFormula> l = new LinkedList<ParserFormula>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conjunction ::= conjunction AND formula 
            {
              LinkedList<ParserFormula> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserFormula> l = (LinkedList<ParserFormula>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("conjunction",15, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // formula ::= term NOTEQUALS term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.NEQ, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // formula ::= term GREATER term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.GT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // formula ::= term LESSTHAN term 
            {
              ParserFormula RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserTerm lhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm rhs = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserComparison(ParserComparison.Type.LT, lhs, rhs); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // formula ::= LOWERCASEID ACYCLIC 
            {
              ParserFormula RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String pred = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAcyclicityConstraint(pred); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // formula ::= BAR quantification COLON formula BAR GEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm lb = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(lb, q, f, new ParserIntConstant(Integer.MAX_VALUE)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // formula ::= BAR quantification COLON formula BAR LEQ term 
            {
              ParserFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm ub = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCardinalityConstraint(new ParserIntConstant(Integer.MIN_VALUE),q,f,ub); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formula ::= formula IMPLIES formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImplies(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formula ::= formula AND formula 
            {
              ParserFormula RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula l = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula r = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserConjunction(l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // formula ::= LOWERCASEID LPAREN arguments RPAREN 
            {
              ParserFormula RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserTerm> args = (LinkedList<ParserTerm>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserAtom(name,args); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("formula",14, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= FACTOR COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(null,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= FACTOR COLON FOR quantification COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,null,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= FACTOR COLON FOR quantification IF formula COLON formula 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,new ParserDoubleConstant(Double.POSITIVE_INFINITY)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= FACTOR COLON FOR quantification IF formula ADD LSQPAREN formula RSQPAREN TIMES term 
            {
              ParserFactorFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).right;
		LinkedList<ParserTyping> q = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		ParserFormula c = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserFormula f = (ParserFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTerm w = (ParserTerm)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserFactorFormula(q,c,f,w); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-11)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // quantification ::= typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserTyping> l = new LinkedList<ParserTyping>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // quantification ::= quantification COMMA typing 
            {
              LinkedList<ParserTyping> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserTyping> l = (LinkedList<ParserTyping>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserTyping c = (ParserTyping)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("quantification",5, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // typing ::= UPPERCASEID LOWERCASEID 
            {
              ParserTyping RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTyping(type,var); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("typing",6, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lowercasecommalist ::= LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lowercasecommalist ::= lowercasecommalist COMMA LOWERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("lowercasecommalist",9, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // name ::= SCORES DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("scores",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // name ::= SCORES 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("scores",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // name ::= WEIGHTS DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("weights",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // name ::= WEIGHTS 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("weights",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // name ::= ATOMS DOT name 
            {
              ParserName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName("atoms",t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // name ::= ATOMS 
            {
              ParserName RESULT =null;
		 RESULT = new ParserName("atoms",null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // name ::= LOWERCASEID DOT name 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName t = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,t); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // name ::= LOWERCASEID 
            {
              ParserName RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserName(n,null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // argtypes ::= UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<String> l = new LinkedList<String>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // argtypes ::= argtypes X UPPERCASEID 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("argtypes",8, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // namedconstantlist ::= namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserNamedConstant> l = new LinkedList<ParserNamedConstant>();
       l.add(c);
       RESULT = l; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // namedconstantlist ::= namedconstantlist COMMA namedconstant 
            {
              LinkedList<ParserNamedConstant> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserNamedConstant c = (ParserNamedConstant)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 l.add(c);
       RESULT = l ; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("namedconstantlist",3, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID MINUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"-"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID PLUS 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r+"+"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // createWeightFunction ::= WEIGHT LOWERCASEID COLON argtypes ARROW UPPERCASEID 
            {
              ParserCreateWeightFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateWeightFunction(id,l,r); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createWeightFunction",21, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes LPAREN SEQ COLON NUMBER RPAREN 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer seq = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserCreatePredicate(id,l,Integer.valueOf(seq)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // createPredicate ::= PREDICATE LOWERCASEID COLON argtypes 
            {
              ParserCreatePredicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreatePredicate(id,l,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createPredicate",20, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // createType ::= TYPE UPPERCASEID COLON ELLIPSIS namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,true,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // createType ::= TYPE UPPERCASEID COLON namedconstantlist 
            {
              ParserCreateType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<ParserNamedConstant> l = (LinkedList<ParserNamedConstant>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserCreateType(id,false,l); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("createType",19, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= CLEAR SCORES 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("scores"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= CLEAR ATOMS 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserClear("atoms"); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= SET name ASSIGN STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSet(n, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= SET name ASSIGN FALSE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= SET name ASSIGN TRUE 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		 RESULT = new ParserSet(n, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= SET name ASSIGN NUMBER 
            {
              ParserStatement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName p = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSet(p, Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= JUMP 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserShift(1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= JUMP MINUS NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserShift(-Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= JUMP NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserShift(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= LEARN NUMBER 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= LEARN NUMBER FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(Integer.valueOf(i),Integer.valueOf(e)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= LEARN FOR NUMBER EPOCHS 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLearn(-1,Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= LEARN 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserLearn(-1,-1); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= COLLECT 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserCollect(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= GREEDY 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserGreedy(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= SOLVE 
            {
              ParserStatement RESULT =null;
		 RESULT = new ParserSolve(100); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= SOLVE NUMBER 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSolve(Integer.valueOf(n)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= ATOMS LOWERCASEID FROM STRING 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(null,null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= TYPES TO STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveTypes(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= TYPES FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserGenerateTypes(g, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= SAVE CORPUS LPAREN NUMBER MINUS NUMBER RPAREN TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(factory, null,Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= SAVE CORPUS LPAREN NUMBER MINUS NUMBER RPAREN TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)).value;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(factory, s.substring(1,s.length()-1),Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= SAVE CORPUS TO LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(f, null); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= SAVE CORPUS TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSaveCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= SAVE name TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserSave(n, f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= TEST TO LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserTest(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= LOAD CORPUS FROM LOWERCASEID STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int factoryleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).left;
		int factoryright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).right;
		String factory = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(factory, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= LOAD CORPUS FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(f, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= LOAD CORPUS FROM STRING LPAREN NUMBER MINUS NUMBER RPAREN 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1), 
                                               Integer.valueOf(f), Integer.valueOf(t)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-8)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= LOAD CORPUS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadCorpus(null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= LOAD name FROM LOWERCASEID STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(n, m, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= LOAD name FROM STRING 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(n, null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WEIGHTS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadWeights(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= SCORES FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoadScores(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= ATOMS FROM STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserLoad(null, null, s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= PRINT name 
            {
              ParserStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserName n = (ParserName)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserPrint(n); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= INSPECT UPPERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, true); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= INSPECT LOWERCASEID 
            {
              ParserStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserInspect(id, false); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= OBSERVED COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.OBSERVED,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= HIDDEN COLON lowercasecommalist 
            {
              ParserStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserAddPredicateToModel(ParserAddPredicateToModel.Type.HIDDEN,a); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= INCLUDE STRING 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = new ParserImport(s.substring(1,s.length()-1)); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= factor 
            {
              ParserStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserFactorFormula f = (ParserFactorFormula)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= createWeightFunction 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateWeightFunction s = (ParserCreateWeightFunction)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= createPredicate 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreatePredicate s = (ParserCreatePredicate)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= createType 
            {
              ParserStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserCreateType s = (ParserCreateType)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 LinkedList<ParserStatement> statements = new LinkedList<ParserStatement>();
               statements.add(stmt);
               RESULT = statements; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program SEMI statement 
            {
              LinkedList<ParserStatement> RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).right;
		LinkedList<ParserStatement> program = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()).right;
		ParserStatement stmt = (ParserStatement)((java_cup.runtime.Symbol) CUP$PMLParser$stack.peek()).value;
		 program.add(stmt);
               RESULT = program; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              LinkedList<ParserStatement> RESULT =null;
		 RESULT = new LinkedList<ParserStatement>(); 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= program SEMI 
            {
              LinkedList<ParserStatement> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> p = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		 RESULT = p; 
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          return CUP$PMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).right;
		LinkedList<ParserStatement> start_val = (LinkedList<ParserStatement>)((java_cup.runtime.Symbol) CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)).value;
		RESULT = start_val;
              CUP$PMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PMLParser$stack.elementAt(CUP$PMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PMLParser$parser.done_parsing();
          return CUP$PMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

